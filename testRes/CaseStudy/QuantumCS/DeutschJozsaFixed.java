

public class DeutschJozsaFixed {

    public DeutschJozsaFixed() {
        super();
    }
    public static final short N = 3;
    /*@
      requires f != null && f.length == 1 << N;
      requires (\forall short i; 0 <= i && i < f.length; f[i]) || (\forall short j; 0 <= j && j < f.length; !f[j]) || count(f) == f.length / 2;
      ensures \result <==> (count(f) == f.length / 2);
   */

    public boolean isBalanced(/*@ non_null */
            boolean[] f) {
        short[] q0 = new short[]{2048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        {
            {
            }
        }
        {
            {
            }
        }
        {
            {
            }
        }
        short size = 1 << N + 1;
        /*@ non_null */
        short[][] oracle = getOracle(N, f);
        {
            {
                q0 = new short[]{511 * oracle[0][0] / 2048 + -511 * oracle[0][1] / 2048 + 511 * oracle[0][2] / 2048 + -511 * oracle[0][3] / 2048 + 511 * oracle[0][4] / 2048 + -511 * oracle[0][5] / 2048 + 511 * oracle[0][6] / 2048 + -511 * oracle[0][7] / 2048 + 511 * oracle[0][8] / 2048 + -511 * oracle[0][9] / 2048 + 511 * oracle[0][10] / 2048 + -511 * oracle[0][11] / 2048 + 511 * oracle[0][12] / 2048 + -511 * oracle[0][13] / 2048 + 511 * oracle[0][14] / 2048 + -511 * oracle[0][15] / 2048, 511 * oracle[1][0] / 2048 + -511 * oracle[1][1] / 2048 + 511 * oracle[1][2] / 2048 + -511 * oracle[1][3] / 2048 + 511 * oracle[1][4] / 2048 + -511 * oracle[1][5] / 2048 + 511 * oracle[1][6] / 2048 + -511 * oracle[1][7] / 2048 + 511 * oracle[1][8] / 2048 + -511 * oracle[1][9] / 2048 + 511 * oracle[1][10] / 2048 + -511 * oracle[1][11] / 2048 + 511 * oracle[1][12] / 2048 + -511 * oracle[1][13] / 2048 + 511 * oracle[1][14] / 2048 + -511 * oracle[1][15] / 2048, 511 * oracle[2][0] / 2048 + -511 * oracle[2][1] / 2048 + 511 * oracle[2][2] / 2048 + -511 * oracle[2][3] / 2048 + 511 * oracle[2][4] / 2048 + -511 * oracle[2][5] / 2048 + 511 * oracle[2][6] / 2048 + -511 * oracle[2][7] / 2048 + 511 * oracle[2][8] / 2048 + -511 * oracle[2][9] / 2048 + 511 * oracle[2][10] / 2048 + -511 * oracle[2][11] / 2048 + 511 * oracle[2][12] / 2048 + -511 * oracle[2][13] / 2048 + 511 * oracle[2][14] / 2048 + -511 * oracle[2][15] / 2048, 511 * oracle[3][0] / 2048 + -511 * oracle[3][1] / 2048 + 511 * oracle[3][2] / 2048 + -511 * oracle[3][3] / 2048 + 511 * oracle[3][4] / 2048 + -511 * oracle[3][5] / 2048 + 511 * oracle[3][6] / 2048 + -511 * oracle[3][7] / 2048 + 511 * oracle[3][8] / 2048 + -511 * oracle[3][9] / 2048 + 511 * oracle[3][10] / 2048 + -511 * oracle[3][11] / 2048 + 511 * oracle[3][12] / 2048 + -511 * oracle[3][13] / 2048 + 511 * oracle[3][14] / 2048 + -511 * oracle[3][15] / 2048, 511 * oracle[4][0] / 2048 + -511 * oracle[4][1] / 2048 + 511 * oracle[4][2] / 2048 + -511 * oracle[4][3] / 2048 + 511 * oracle[4][4] / 2048 + -511 * oracle[4][5] / 2048 + 511 * oracle[4][6] / 2048 + -511 * oracle[4][7] / 2048 + 511 * oracle[4][8] / 2048 + -511 * oracle[4][9] / 2048 + 511 * oracle[4][10] / 2048 + -511 * oracle[4][11] / 2048 + 511 * oracle[4][12] / 2048 + -511 * oracle[4][13] / 2048 + 511 * oracle[4][14] / 2048 + -511 * oracle[4][15] / 2048, 511 * oracle[5][0] / 2048 + -511 * oracle[5][1] / 2048 + 511 * oracle[5][2] / 2048 + -511 * oracle[5][3] / 2048 + 511 * oracle[5][4] / 2048 + -511 * oracle[5][5] / 2048 + 511 * oracle[5][6] / 2048 + -511 * oracle[5][7] / 2048 + 511 * oracle[5][8] / 2048 + -511 * oracle[5][9] / 2048 + 511 * oracle[5][10] / 2048 + -511 * oracle[5][11] / 2048 + 511 * oracle[5][12] / 2048 + -511 * oracle[5][13] / 2048 + 511 * oracle[5][14] / 2048 + -511 * oracle[5][15] / 2048, 511 * oracle[6][0] / 2048 + -511 * oracle[6][1] / 2048 + 511 * oracle[6][2] / 2048 + -511 * oracle[6][3] / 2048 + 511 * oracle[6][4] / 2048 + -511 * oracle[6][5] / 2048 + 511 * oracle[6][6] / 2048 + -511 * oracle[6][7] / 2048 + 511 * oracle[6][8] / 2048 + -511 * oracle[6][9] / 2048 + 511 * oracle[6][10] / 2048 + -511 * oracle[6][11] / 2048 + 511 * oracle[6][12] / 2048 + -511 * oracle[6][13] / 2048 + 511 * oracle[6][14] / 2048 + -511 * oracle[6][15] / 2048, 511 * oracle[7][0] / 2048 + -511 * oracle[7][1] / 2048 + 511 * oracle[7][2] / 2048 + -511 * oracle[7][3] / 2048 + 511 * oracle[7][4] / 2048 + -511 * oracle[7][5] / 2048 + 511 * oracle[7][6] / 2048 + -511 * oracle[7][7] / 2048 + 511 * oracle[7][8] / 2048 + -511 * oracle[7][9] / 2048 + 511 * oracle[7][10] / 2048 + -511 * oracle[7][11] / 2048 + 511 * oracle[7][12] / 2048 + -511 * oracle[7][13] / 2048 + 511 * oracle[7][14] / 2048 + -511 * oracle[7][15] / 2048, 511 * oracle[8][0] / 2048 + -511 * oracle[8][1] / 2048 + 511 * oracle[8][2] / 2048 + -511 * oracle[8][3] / 2048 + 511 * oracle[8][4] / 2048 + -511 * oracle[8][5] / 2048 + 511 * oracle[8][6] / 2048 + -511 * oracle[8][7] / 2048 + 511 * oracle[8][8] / 2048 + -511 * oracle[8][9] / 2048 + 511 * oracle[8][10] / 2048 + -511 * oracle[8][11] / 2048 + 511 * oracle[8][12] / 2048 + -511 * oracle[8][13] / 2048 + 511 * oracle[8][14] / 2048 + -511 * oracle[8][15] / 2048, 511 * oracle[9][0] / 2048 + -511 * oracle[9][1] / 2048 + 511 * oracle[9][2] / 2048 + -511 * oracle[9][3] / 2048 + 511 * oracle[9][4] / 2048 + -511 * oracle[9][5] / 2048 + 511 * oracle[9][6] / 2048 + -511 * oracle[9][7] / 2048 + 511 * oracle[9][8] / 2048 + -511 * oracle[9][9] / 2048 + 511 * oracle[9][10] / 2048 + -511 * oracle[9][11] / 2048 + 511 * oracle[9][12] / 2048 + -511 * oracle[9][13] / 2048 + 511 * oracle[9][14] / 2048 + -511 * oracle[9][15] / 2048, 511 * oracle[10][0] / 2048 + -511 * oracle[10][1] / 2048 + 511 * oracle[10][2] / 2048 + -511 * oracle[10][3] / 2048 + 511 * oracle[10][4] / 2048 + -511 * oracle[10][5] / 2048 + 511 * oracle[10][6] / 2048 + -511 * oracle[10][7] / 2048 + 511 * oracle[10][8] / 2048 + -511 * oracle[10][9] / 2048 + 511 * oracle[10][10] / 2048 + -511 * oracle[10][11] / 2048 + 511 * oracle[10][12] / 2048 + -511 * oracle[10][13] / 2048 + 511 * oracle[10][14] / 2048 + -511 * oracle[10][15] / 2048, 511 * oracle[11][0] / 2048 + -511 * oracle[11][1] / 2048 + 511 * oracle[11][2] / 2048 + -511 * oracle[11][3] / 2048 + 511 * oracle[11][4] / 2048 + -511 * oracle[11][5] / 2048 + 511 * oracle[11][6] / 2048 + -511 * oracle[11][7] / 2048 + 511 * oracle[11][8] / 2048 + -511 * oracle[11][9] / 2048 + 511 * oracle[11][10] / 2048 + -511 * oracle[11][11] / 2048 + 511 * oracle[11][12] / 2048 + -511 * oracle[11][13] / 2048 + 511 * oracle[11][14] / 2048 + -511 * oracle[11][15] / 2048, 511 * oracle[12][0] / 2048 + -511 * oracle[12][1] / 2048 + 511 * oracle[12][2] / 2048 + -511 * oracle[12][3] / 2048 + 511 * oracle[12][4] / 2048 + -511 * oracle[12][5] / 2048 + 511 * oracle[12][6] / 2048 + -511 * oracle[12][7] / 2048 + 511 * oracle[12][8] / 2048 + -511 * oracle[12][9] / 2048 + 511 * oracle[12][10] / 2048 + -511 * oracle[12][11] / 2048 + 511 * oracle[12][12] / 2048 + -511 * oracle[12][13] / 2048 + 511 * oracle[12][14] / 2048 + -511 * oracle[12][15] / 2048, 511 * oracle[13][0] / 2048 + -511 * oracle[13][1] / 2048 + 511 * oracle[13][2] / 2048 + -511 * oracle[13][3] / 2048 + 511 * oracle[13][4] / 2048 + -511 * oracle[13][5] / 2048 + 511 * oracle[13][6] / 2048 + -511 * oracle[13][7] / 2048 + 511 * oracle[13][8] / 2048 + -511 * oracle[13][9] / 2048 + 511 * oracle[13][10] / 2048 + -511 * oracle[13][11] / 2048 + 511 * oracle[13][12] / 2048 + -511 * oracle[13][13] / 2048 + 511 * oracle[13][14] / 2048 + -511 * oracle[13][15] / 2048, 511 * oracle[14][0] / 2048 + -511 * oracle[14][1] / 2048 + 511 * oracle[14][2] / 2048 + -511 * oracle[14][3] / 2048 + 511 * oracle[14][4] / 2048 + -511 * oracle[14][5] / 2048 + 511 * oracle[14][6] / 2048 + -511 * oracle[14][7] / 2048 + 511 * oracle[14][8] / 2048 + -511 * oracle[14][9] / 2048 + 511 * oracle[14][10] / 2048 + -511 * oracle[14][11] / 2048 + 511 * oracle[14][12] / 2048 + -511 * oracle[14][13] / 2048 + 511 * oracle[14][14] / 2048 + -511 * oracle[14][15] / 2048, 511 * oracle[15][0] / 2048 + -511 * oracle[15][1] / 2048 + 511 * oracle[15][2] / 2048 + -511 * oracle[15][3] / 2048 + 511 * oracle[15][4] / 2048 + -511 * oracle[15][5] / 2048 + 511 * oracle[15][6] / 2048 + -511 * oracle[15][7] / 2048 + 511 * oracle[15][8] / 2048 + -511 * oracle[15][9] / 2048 + 511 * oracle[15][10] / 2048 + -511 * oracle[15][11] / 2048 + 511 * oracle[15][12] / 2048 + -511 * oracle[15][13] / 2048 + 511 * oracle[15][14] / 2048 + -511 * oracle[15][15] / 2048};
            }
        }
        {
            {
                q0 = new short[]{1448 * q0[0] / 2048 + 1448 * q0[8] / 2048, 1448 * q0[1] / 2048 + 1448 * q0[9] / 2048, 1448 * q0[2] / 2048 + 1448 * q0[10] / 2048, 1448 * q0[3] / 2048 + 1448 * q0[11] / 2048, 1448 * q0[4] / 2048 + 1448 * q0[12] / 2048, 1448 * q0[5] / 2048 + 1448 * q0[13] / 2048, 1448 * q0[6] / 2048 + 1448 * q0[14] / 2048, 1448 * q0[7] / 2048 + 1448 * q0[15] / 2048, 1448 * q0[0] / 2048 + -1448 * q0[8] / 2048, 1448 * q0[1] / 2048 + -1448 * q0[9] / 2048, 1448 * q0[2] / 2048 + -1448 * q0[10] / 2048, 1448 * q0[3] / 2048 + -1448 * q0[11] / 2048, 1448 * q0[4] / 2048 + -1448 * q0[12] / 2048, 1448 * q0[5] / 2048 + -1448 * q0[13] / 2048, 1448 * q0[6] / 2048 + -1448 * q0[14] / 2048, 1448 * q0[7] / 2048 + -1448 * q0[15] / 2048};
            }
        }
        {
            {
                q0 = new short[]{1448 * q0[0] / 2048 + 1448 * q0[4] / 2048, 1448 * q0[1] / 2048 + 1448 * q0[5] / 2048, 1448 * q0[2] / 2048 + 1448 * q0[6] / 2048, 1448 * q0[3] / 2048 + 1448 * q0[7] / 2048, 1448 * q0[0] / 2048 + -1448 * q0[4] / 2048, 1448 * q0[1] / 2048 + -1448 * q0[5] / 2048, 1448 * q0[2] / 2048 + -1448 * q0[6] / 2048, 1448 * q0[3] / 2048 + -1448 * q0[7] / 2048, 1448 * q0[8] / 2048 + 1448 * q0[12] / 2048, 1448 * q0[9] / 2048 + 1448 * q0[13] / 2048, 1448 * q0[10] / 2048 + 1448 * q0[14] / 2048, 1448 * q0[11] / 2048 + 1448 * q0[15] / 2048, 1448 * q0[8] / 2048 + -1448 * q0[12] / 2048, 1448 * q0[9] / 2048 + -1448 * q0[13] / 2048, 1448 * q0[10] / 2048 + -1448 * q0[14] / 2048, 1448 * q0[11] / 2048 + -1448 * q0[15] / 2048};
            }
        }
        boolean res = false;
        {
            {
                q0 = new short[]{1448 * q0[0] / 2048 + 1448 * q0[2] / 2048, 1448 * q0[1] / 2048 + 1448 * q0[3] / 2048, 1448 * q0[0] / 2048 + -1448 * q0[2] / 2048, 1448 * q0[1] / 2048 + -1448 * q0[3] / 2048, 1448 * q0[4] / 2048 + 1448 * q0[6] / 2048, 1448 * q0[5] / 2048 + 1448 * q0[7] / 2048, 1448 * q0[4] / 2048 + -1448 * q0[6] / 2048, 1448 * q0[5] / 2048 + -1448 * q0[7] / 2048, 1448 * q0[8] / 2048 + 1448 * q0[10] / 2048, 1448 * q0[9] / 2048 + 1448 * q0[11] / 2048, 1448 * q0[8] / 2048 + -1448 * q0[10] / 2048, 1448 * q0[9] / 2048 + -1448 * q0[11] / 2048, 1448 * q0[12] / 2048 + 1448 * q0[14] / 2048, 1448 * q0[13] / 2048 + 1448 * q0[15] / 2048, 1448 * q0[12] / 2048 + -1448 * q0[14] / 2048, 1448 * q0[13] / 2048 + -1448 * q0[15] / 2048};
                boolean $$_tmp_measureVar1;
                if (q0[8] * q0[8] / 2048 + q0[9] * q0[9] / 2048 + q0[10] * q0[10] / 2048 + q0[11] * q0[11] / 2048 + q0[12] * q0[12] / 2048 + q0[13] * q0[13] / 2048 + q0[14] * q0[14] / 2048 + q0[15] * q0[15] / 2048 > q0[0] * q0[0] / 2048 + q0[1] * q0[1] / 2048 + q0[2] * q0[2] / 2048 + q0[3] * q0[3] / 2048 + q0[4] * q0[4] / 2048 + q0[5] * q0[5] / 2048 + q0[6] * q0[6] / 2048 + q0[7] * q0[7] / 2048) {
                    q0 = new short[]{0, 0, 0, 0, 0, 0, 0, 0, q0[8], q0[9], q0[10], q0[11], q0[12], q0[13], q0[14], q0[15]};
                    $$_tmp_measureVar1 = true;
                } else {
                    q0 = new short[]{q0[0], q0[1], q0[2], q0[3], q0[4], q0[5], q0[6], q0[7], 0, 0, 0, 0, 0, 0, 0, 0};
                    $$_tmp_measureVar1 = false;
                }
                res |= $$_tmp_measureVar1;
            }
        }
        {
            {
                boolean $$_tmp_measureVar2;
                if (q0[4] * q0[4] / 2048 + q0[5] * q0[5] / 2048 + q0[6] * q0[6] / 2048 + q0[7] * q0[7] / 2048 + q0[12] * q0[12] / 2048 + q0[13] * q0[13] / 2048 + q0[14] * q0[14] / 2048 + q0[15] * q0[15] / 2048 > q0[0] * q0[0] / 2048 + q0[1] * q0[1] / 2048 + q0[2] * q0[2] / 2048 + q0[3] * q0[3] / 2048 + q0[8] * q0[8] / 2048 + q0[9] * q0[9] / 2048 + q0[10] * q0[10] / 2048 + q0[11] * q0[11] / 2048) {
                    q0 = new short[]{0, 0, 0, 0, q0[4], q0[5], q0[6], q0[7], 0, 0, 0, 0, q0[12], q0[13], q0[14], q0[15]};
                    $$_tmp_measureVar2 = true;
                } else {
                    q0 = new short[]{q0[0], q0[1], q0[2], q0[3], 0, 0, 0, 0, q0[8], q0[9], q0[10], q0[11], 0, 0, 0, 0};
                    $$_tmp_measureVar2 = false;
                }
                res |= $$_tmp_measureVar2;
            }
        }
        {
            {
                boolean $$_tmp_measureVar3;
                if (q0[2] * q0[2] / 2048 + q0[3] * q0[3] / 2048 + q0[6] * q0[6] / 2048 + q0[7] * q0[7] / 2048 + q0[10] * q0[10] / 2048 + q0[11] * q0[11] / 2048 + q0[14] * q0[14] / 2048 + q0[15] * q0[15] / 2048 > q0[0] * q0[0] / 2048 + q0[1] * q0[1] / 2048 + q0[4] * q0[4] / 2048 + q0[5] * q0[5] / 2048 + q0[8] * q0[8] / 2048 + q0[9] * q0[9] / 2048 + q0[12] * q0[12] / 2048 + q0[13] * q0[13] / 2048) {
                    q0 = new short[]{0, 0, q0[2], q0[3], 0, 0, q0[6], q0[7], 0, 0, q0[10], q0[11], 0, 0, q0[14], q0[15]};
                    $$_tmp_measureVar3 = true;
                } else {
                    q0 = new short[]{q0[0], q0[1], 0, 0, q0[4], q0[5], 0, 0, q0[8], q0[9], 0, 0, q0[12], q0[13], 0, 0};
                    $$_tmp_measureVar3 = false;
                }
                res |= $$_tmp_measureVar3;
            }
        }
        return res;
    }
    /*@
      requires f != null && f.length == 1 << N;
      requires (\forall short i; 0 <= i && i < f.length; f[i]) || (\forall short j; 0 <= j && j < f.length; !f[j]) || count(f) == f.length / 2;
      ensures \result <==> (count(f) == f.length / 2);
   */

    public boolean isBalancedBroken(/*@ non_null */
            boolean[] f) {
        short[] q0 = new short[]{2048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        {
            {
            }
        }
        {
            {
            }
        }
        {
            {
            }
        }
        short size = 1 << N + 1;
        /*@ non_null */
        short[][] oracle = getOracle(N, f);
        {
            {
                q0 = new short[]{723 * oracle[0][0] / 2048 + 723 * oracle[0][2] / 2048 + 723 * oracle[0][4] / 2048 + 723 * oracle[0][6] / 2048 + 723 * oracle[0][8] / 2048 + 723 * oracle[0][10] / 2048 + 723 * oracle[0][12] / 2048 + 723 * oracle[0][14] / 2048, 723 * oracle[1][0] / 2048 + 723 * oracle[1][2] / 2048 + 723 * oracle[1][4] / 2048 + 723 * oracle[1][6] / 2048 + 723 * oracle[1][8] / 2048 + 723 * oracle[1][10] / 2048 + 723 * oracle[1][12] / 2048 + 723 * oracle[1][14] / 2048, 723 * oracle[2][0] / 2048 + 723 * oracle[2][2] / 2048 + 723 * oracle[2][4] / 2048 + 723 * oracle[2][6] / 2048 + 723 * oracle[2][8] / 2048 + 723 * oracle[2][10] / 2048 + 723 * oracle[2][12] / 2048 + 723 * oracle[2][14] / 2048, 723 * oracle[3][0] / 2048 + 723 * oracle[3][2] / 2048 + 723 * oracle[3][4] / 2048 + 723 * oracle[3][6] / 2048 + 723 * oracle[3][8] / 2048 + 723 * oracle[3][10] / 2048 + 723 * oracle[3][12] / 2048 + 723 * oracle[3][14] / 2048, 723 * oracle[4][0] / 2048 + 723 * oracle[4][2] / 2048 + 723 * oracle[4][4] / 2048 + 723 * oracle[4][6] / 2048 + 723 * oracle[4][8] / 2048 + 723 * oracle[4][10] / 2048 + 723 * oracle[4][12] / 2048 + 723 * oracle[4][14] / 2048, 723 * oracle[5][0] / 2048 + 723 * oracle[5][2] / 2048 + 723 * oracle[5][4] / 2048 + 723 * oracle[5][6] / 2048 + 723 * oracle[5][8] / 2048 + 723 * oracle[5][10] / 2048 + 723 * oracle[5][12] / 2048 + 723 * oracle[5][14] / 2048, 723 * oracle[6][0] / 2048 + 723 * oracle[6][2] / 2048 + 723 * oracle[6][4] / 2048 + 723 * oracle[6][6] / 2048 + 723 * oracle[6][8] / 2048 + 723 * oracle[6][10] / 2048 + 723 * oracle[6][12] / 2048 + 723 * oracle[6][14] / 2048, 723 * oracle[7][0] / 2048 + 723 * oracle[7][2] / 2048 + 723 * oracle[7][4] / 2048 + 723 * oracle[7][6] / 2048 + 723 * oracle[7][8] / 2048 + 723 * oracle[7][10] / 2048 + 723 * oracle[7][12] / 2048 + 723 * oracle[7][14] / 2048, 723 * oracle[8][0] / 2048 + 723 * oracle[8][2] / 2048 + 723 * oracle[8][4] / 2048 + 723 * oracle[8][6] / 2048 + 723 * oracle[8][8] / 2048 + 723 * oracle[8][10] / 2048 + 723 * oracle[8][12] / 2048 + 723 * oracle[8][14] / 2048, 723 * oracle[9][0] / 2048 + 723 * oracle[9][2] / 2048 + 723 * oracle[9][4] / 2048 + 723 * oracle[9][6] / 2048 + 723 * oracle[9][8] / 2048 + 723 * oracle[9][10] / 2048 + 723 * oracle[9][12] / 2048 + 723 * oracle[9][14] / 2048, 723 * oracle[10][0] / 2048 + 723 * oracle[10][2] / 2048 + 723 * oracle[10][4] / 2048 + 723 * oracle[10][6] / 2048 + 723 * oracle[10][8] / 2048 + 723 * oracle[10][10] / 2048 + 723 * oracle[10][12] / 2048 + 723 * oracle[10][14] / 2048, 723 * oracle[11][0] / 2048 + 723 * oracle[11][2] / 2048 + 723 * oracle[11][4] / 2048 + 723 * oracle[11][6] / 2048 + 723 * oracle[11][8] / 2048 + 723 * oracle[11][10] / 2048 + 723 * oracle[11][12] / 2048 + 723 * oracle[11][14] / 2048, 723 * oracle[12][0] / 2048 + 723 * oracle[12][2] / 2048 + 723 * oracle[12][4] / 2048 + 723 * oracle[12][6] / 2048 + 723 * oracle[12][8] / 2048 + 723 * oracle[12][10] / 2048 + 723 * oracle[12][12] / 2048 + 723 * oracle[12][14] / 2048, 723 * oracle[13][0] / 2048 + 723 * oracle[13][2] / 2048 + 723 * oracle[13][4] / 2048 + 723 * oracle[13][6] / 2048 + 723 * oracle[13][8] / 2048 + 723 * oracle[13][10] / 2048 + 723 * oracle[13][12] / 2048 + 723 * oracle[13][14] / 2048, 723 * oracle[14][0] / 2048 + 723 * oracle[14][2] / 2048 + 723 * oracle[14][4] / 2048 + 723 * oracle[14][6] / 2048 + 723 * oracle[14][8] / 2048 + 723 * oracle[14][10] / 2048 + 723 * oracle[14][12] / 2048 + 723 * oracle[14][14] / 2048, 723 * oracle[15][0] / 2048 + 723 * oracle[15][2] / 2048 + 723 * oracle[15][4] / 2048 + 723 * oracle[15][6] / 2048 + 723 * oracle[15][8] / 2048 + 723 * oracle[15][10] / 2048 + 723 * oracle[15][12] / 2048 + 723 * oracle[15][14] / 2048};
            }
        }
        {
            {
                q0 = new short[]{1448 * q0[0] / 2048 + 1448 * q0[8] / 2048, 1448 * q0[1] / 2048 + 1448 * q0[9] / 2048, 1448 * q0[2] / 2048 + 1448 * q0[10] / 2048, 1448 * q0[3] / 2048 + 1448 * q0[11] / 2048, 1448 * q0[4] / 2048 + 1448 * q0[12] / 2048, 1448 * q0[5] / 2048 + 1448 * q0[13] / 2048, 1448 * q0[6] / 2048 + 1448 * q0[14] / 2048, 1448 * q0[7] / 2048 + 1448 * q0[15] / 2048, 1448 * q0[0] / 2048 + -1448 * q0[8] / 2048, 1448 * q0[1] / 2048 + -1448 * q0[9] / 2048, 1448 * q0[2] / 2048 + -1448 * q0[10] / 2048, 1448 * q0[3] / 2048 + -1448 * q0[11] / 2048, 1448 * q0[4] / 2048 + -1448 * q0[12] / 2048, 1448 * q0[5] / 2048 + -1448 * q0[13] / 2048, 1448 * q0[6] / 2048 + -1448 * q0[14] / 2048, 1448 * q0[7] / 2048 + -1448 * q0[15] / 2048};
            }
        }
        {
            {
                q0 = new short[]{1448 * q0[0] / 2048 + 1448 * q0[4] / 2048, 1448 * q0[1] / 2048 + 1448 * q0[5] / 2048, 1448 * q0[2] / 2048 + 1448 * q0[6] / 2048, 1448 * q0[3] / 2048 + 1448 * q0[7] / 2048, 1448 * q0[0] / 2048 + -1448 * q0[4] / 2048, 1448 * q0[1] / 2048 + -1448 * q0[5] / 2048, 1448 * q0[2] / 2048 + -1448 * q0[6] / 2048, 1448 * q0[3] / 2048 + -1448 * q0[7] / 2048, 1448 * q0[8] / 2048 + 1448 * q0[12] / 2048, 1448 * q0[9] / 2048 + 1448 * q0[13] / 2048, 1448 * q0[10] / 2048 + 1448 * q0[14] / 2048, 1448 * q0[11] / 2048 + 1448 * q0[15] / 2048, 1448 * q0[8] / 2048 + -1448 * q0[12] / 2048, 1448 * q0[9] / 2048 + -1448 * q0[13] / 2048, 1448 * q0[10] / 2048 + -1448 * q0[14] / 2048, 1448 * q0[11] / 2048 + -1448 * q0[15] / 2048};
            }
        }
        boolean res = false;
        {
            {
                q0 = new short[]{1448 * q0[0] / 2048 + 1448 * q0[2] / 2048, 1448 * q0[1] / 2048 + 1448 * q0[3] / 2048, 1448 * q0[0] / 2048 + -1448 * q0[2] / 2048, 1448 * q0[1] / 2048 + -1448 * q0[3] / 2048, 1448 * q0[4] / 2048 + 1448 * q0[6] / 2048, 1448 * q0[5] / 2048 + 1448 * q0[7] / 2048, 1448 * q0[4] / 2048 + -1448 * q0[6] / 2048, 1448 * q0[5] / 2048 + -1448 * q0[7] / 2048, 1448 * q0[8] / 2048 + 1448 * q0[10] / 2048, 1448 * q0[9] / 2048 + 1448 * q0[11] / 2048, 1448 * q0[8] / 2048 + -1448 * q0[10] / 2048, 1448 * q0[9] / 2048 + -1448 * q0[11] / 2048, 1448 * q0[12] / 2048 + 1448 * q0[14] / 2048, 1448 * q0[13] / 2048 + 1448 * q0[15] / 2048, 1448 * q0[12] / 2048 + -1448 * q0[14] / 2048, 1448 * q0[13] / 2048 + -1448 * q0[15] / 2048};
                boolean $$_tmp_measureVar4;
                if (q0[8] * q0[8] / 2048 + q0[9] * q0[9] / 2048 + q0[10] * q0[10] / 2048 + q0[11] * q0[11] / 2048 + q0[12] * q0[12] / 2048 + q0[13] * q0[13] / 2048 + q0[14] * q0[14] / 2048 + q0[15] * q0[15] / 2048 > q0[0] * q0[0] / 2048 + q0[1] * q0[1] / 2048 + q0[2] * q0[2] / 2048 + q0[3] * q0[3] / 2048 + q0[4] * q0[4] / 2048 + q0[5] * q0[5] / 2048 + q0[6] * q0[6] / 2048 + q0[7] * q0[7] / 2048) {
                    q0 = new short[]{0, 0, 0, 0, 0, 0, 0, 0, q0[8], q0[9], q0[10], q0[11], q0[12], q0[13], q0[14], q0[15]};
                    $$_tmp_measureVar4 = true;
                } else {
                    q0 = new short[]{q0[0], q0[1], q0[2], q0[3], q0[4], q0[5], q0[6], q0[7], 0, 0, 0, 0, 0, 0, 0, 0};
                    $$_tmp_measureVar4 = false;
                }
                res |= $$_tmp_measureVar4;
            }
        }
        {
            {
                boolean $$_tmp_measureVar5;
                if (q0[4] * q0[4] / 2048 + q0[5] * q0[5] / 2048 + q0[6] * q0[6] / 2048 + q0[7] * q0[7] / 2048 + q0[12] * q0[12] / 2048 + q0[13] * q0[13] / 2048 + q0[14] * q0[14] / 2048 + q0[15] * q0[15] / 2048 > q0[0] * q0[0] / 2048 + q0[1] * q0[1] / 2048 + q0[2] * q0[2] / 2048 + q0[3] * q0[3] / 2048 + q0[8] * q0[8] / 2048 + q0[9] * q0[9] / 2048 + q0[10] * q0[10] / 2048 + q0[11] * q0[11] / 2048) {
                    q0 = new short[]{0, 0, 0, 0, q0[4], q0[5], q0[6], q0[7], 0, 0, 0, 0, q0[12], q0[13], q0[14], q0[15]};
                    $$_tmp_measureVar5 = true;
                } else {
                    q0 = new short[]{q0[0], q0[1], q0[2], q0[3], 0, 0, 0, 0, q0[8], q0[9], q0[10], q0[11], 0, 0, 0, 0};
                    $$_tmp_measureVar5 = false;
                }
                res |= $$_tmp_measureVar5;
            }
        }
        {
            {
                boolean $$_tmp_measureVar6;
                if (q0[2] * q0[2] / 2048 + q0[3] * q0[3] / 2048 + q0[6] * q0[6] / 2048 + q0[7] * q0[7] / 2048 + q0[10] * q0[10] / 2048 + q0[11] * q0[11] / 2048 + q0[14] * q0[14] / 2048 + q0[15] * q0[15] / 2048 > q0[0] * q0[0] / 2048 + q0[1] * q0[1] / 2048 + q0[4] * q0[4] / 2048 + q0[5] * q0[5] / 2048 + q0[8] * q0[8] / 2048 + q0[9] * q0[9] / 2048 + q0[12] * q0[12] / 2048 + q0[13] * q0[13] / 2048) {
                    q0 = new short[]{0, 0, q0[2], q0[3], 0, 0, q0[6], q0[7], 0, 0, q0[10], q0[11], 0, 0, q0[14], q0[15]};
                    $$_tmp_measureVar6 = true;
                } else {
                    q0 = new short[]{q0[0], q0[1], 0, 0, q0[4], q0[5], 0, 0, q0[8], q0[9], 0, 0, q0[12], q0[13], 0, 0};
                    $$_tmp_measureVar6 = false;
                }
                res |= $$_tmp_measureVar6;
            }
        }
        return res;
    }

    public short[][] getOracle(short N, /*@ non_null */
                             boolean[] f) {
        short size = 1 << N + 1;
        /*@ non_null */
        short[][] oracle = new short[size][size];
        for (short i = 0; i < size; ++i) {
            for (short j = 0; j < size; ++j) {
                oracle[i][j] = 0;
                short val = f[i / 2] ? 2048 : 0;
                if (i == j) {
                    {
                        oracle[i][j] = 2048 - val;
                    }
                }
                short even = (i % 2) * 2 - 1;
                if (i == j + even) {
                    {
                        oracle[i][j] = val;
                    }
                }
            }
        }
        return oracle;
    }

    /*@ pure */
    public static short count(/*@ non_null */
            boolean[] f) {
        short i = 0;
        for (short j = 0; j < f.length; j++) {
            if (f[j]) {
                {
                    ++i;
                }
            }
        }
        return i;
    }
}
