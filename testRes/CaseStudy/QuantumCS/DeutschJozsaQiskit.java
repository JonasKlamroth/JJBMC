

import org.cprover.CProver;

public class DeutschJozsaQiskit {

    public DeutschJozsaQiskit() {
        super();
    }
    public static final int n = 3;
    /*@
      requires 1 <= a < 1 << n;
      ensures \result == oracleType;
      assignable \nothing;
   */

    public static boolean dj(boolean oracleType, boolean oracleValue, int a) {
        float[] q0 = new float[]{1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F};
        {
            {
            }
        }
        {
            {
            }
        }
        {
            {
            }
        }
        q0 = new float[]{0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F};
        if (!oracleType) {
            {
                if (oracleValue) {
                    {
                    }
                    q0 = new float[]{-0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F, -0.24999997F, 0.24999997F};
                } else {
                    {
                    }
                }
            }
        } else {
            {
                {
                    {
                        if ((a & (1 << 0)) != 0) {
                            {
                            }
                            q0 = new float[]{q0[0], q0[1], q0[2], q0[3], q0[4], q0[5], q0[6], q0[7], q0[9], q0[8], q0[11], q0[10], q0[13], q0[12], q0[15], q0[14]};
                        }
                    }
                }
                {
                    {
                        if ((a & (1 << 1)) != 0) {
                            {
                            }
                            q0 = new float[]{q0[0], q0[1], q0[2], q0[3], q0[5], q0[4], q0[7], q0[6], q0[8], q0[9], q0[10], q0[11], q0[13], q0[12], q0[15], q0[14]};
                        }
                    }
                }
                {
                    {
                        if ((a & (1 << 2)) != 0) {
                            {
                            }
                            q0 = new float[]{q0[0], q0[1], q0[3], q0[2], q0[4], q0[5], q0[7], q0[6], q0[8], q0[9], q0[11], q0[10], q0[12], q0[13], q0[15], q0[14]};
                        }
                    }
                }
            }
        }
        {
            {
            }
        }
        {
            {
                q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[8], 0.70710677F * q0[1] + 0.70710677F * q0[9], 0.70710677F * q0[2] + 0.70710677F * q0[10], 0.70710677F * q0[3] + 0.70710677F * q0[11], 0.70710677F * q0[4] + 0.70710677F * q0[12], 0.70710677F * q0[5] + 0.70710677F * q0[13], 0.70710677F * q0[6] + 0.70710677F * q0[14], 0.70710677F * q0[7] + 0.70710677F * q0[15], 0.70710677F * q0[0] + -0.70710677F * q0[8], 0.70710677F * q0[1] + -0.70710677F * q0[9], 0.70710677F * q0[2] + -0.70710677F * q0[10], 0.70710677F * q0[3] + -0.70710677F * q0[11], 0.70710677F * q0[4] + -0.70710677F * q0[12], 0.70710677F * q0[5] + -0.70710677F * q0[13], 0.70710677F * q0[6] + -0.70710677F * q0[14], 0.70710677F * q0[7] + -0.70710677F * q0[15]};
            }
        }
        {
            {
                q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[4], 0.70710677F * q0[1] + 0.70710677F * q0[5], 0.70710677F * q0[2] + 0.70710677F * q0[6], 0.70710677F * q0[3] + 0.70710677F * q0[7], 0.70710677F * q0[0] + -0.70710677F * q0[4], 0.70710677F * q0[1] + -0.70710677F * q0[5], 0.70710677F * q0[2] + -0.70710677F * q0[6], 0.70710677F * q0[3] + -0.70710677F * q0[7], 0.70710677F * q0[8] + 0.70710677F * q0[12], 0.70710677F * q0[9] + 0.70710677F * q0[13], 0.70710677F * q0[10] + 0.70710677F * q0[14], 0.70710677F * q0[11] + 0.70710677F * q0[15], 0.70710677F * q0[8] + -0.70710677F * q0[12], 0.70710677F * q0[9] + -0.70710677F * q0[13], 0.70710677F * q0[10] + -0.70710677F * q0[14], 0.70710677F * q0[11] + -0.70710677F * q0[15]};
            }
        }
        boolean res = false;
        {
            {
                q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[2], 0.70710677F * q0[1] + 0.70710677F * q0[3], 0.70710677F * q0[0] + -0.70710677F * q0[2], 0.70710677F * q0[1] + -0.70710677F * q0[3], 0.70710677F * q0[4] + 0.70710677F * q0[6], 0.70710677F * q0[5] + 0.70710677F * q0[7], 0.70710677F * q0[4] + -0.70710677F * q0[6], 0.70710677F * q0[5] + -0.70710677F * q0[7], 0.70710677F * q0[8] + 0.70710677F * q0[10], 0.70710677F * q0[9] + 0.70710677F * q0[11], 0.70710677F * q0[8] + -0.70710677F * q0[10], 0.70710677F * q0[9] + -0.70710677F * q0[11], 0.70710677F * q0[12] + 0.70710677F * q0[14], 0.70710677F * q0[13] + 0.70710677F * q0[15], 0.70710677F * q0[12] + -0.70710677F * q0[14], 0.70710677F * q0[13] + -0.70710677F * q0[15]};
                boolean $$_tmp_measureVar1;
                if (CProver.nondetBoolean()) {
                    if (true && q0[0] == 0.0F && q0[1] == 0.0F && q0[2] == 0.0F && q0[3] == 0.0F && q0[4] == 0.0F && q0[5] == 0.0F && q0[6] == 0.0F && q0[7] == 0.0F) CProver.assume(false);
                    q0 = new float[]{q0[0], q0[1], q0[2], q0[3], q0[4], q0[5], q0[6], q0[7], 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F};
                    $$_tmp_measureVar1 = false;
                } else {
                    if (true && q0[8] == 0.0F && q0[9] == 0.0F && q0[10] == 0.0F && q0[11] == 0.0F && q0[12] == 0.0F && q0[13] == 0.0F && q0[14] == 0.0F && q0[15] == 0.0F) CProver.assume(false);
                    q0 = new float[]{0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, q0[8], q0[9], q0[10], q0[11], q0[12], q0[13], q0[14], q0[15]};
                    $$_tmp_measureVar1 = true;
                }
                res |= $$_tmp_measureVar1;
            }
        }
        {
            {
                boolean $$_tmp_measureVar2;
                if (CProver.nondetBoolean()) {
                    if (true && q0[0] == 0.0F && q0[1] == 0.0F && q0[2] == 0.0F && q0[3] == 0.0F && q0[8] == 0.0F && q0[9] == 0.0F && q0[10] == 0.0F && q0[11] == 0.0F) CProver.assume(false);
                    q0 = new float[]{q0[0], q0[1], q0[2], q0[3], 0.0F, 0.0F, 0.0F, 0.0F, q0[8], q0[9], q0[10], q0[11], 0.0F, 0.0F, 0.0F, 0.0F};
                    $$_tmp_measureVar2 = false;
                } else {
                    if (true && q0[4] == 0.0F && q0[5] == 0.0F && q0[6] == 0.0F && q0[7] == 0.0F && q0[12] == 0.0F && q0[13] == 0.0F && q0[14] == 0.0F && q0[15] == 0.0F) CProver.assume(false);
                    q0 = new float[]{0.0F, 0.0F, 0.0F, 0.0F, q0[4], q0[5], q0[6], q0[7], 0.0F, 0.0F, 0.0F, 0.0F, q0[12], q0[13], q0[14], q0[15]};
                    $$_tmp_measureVar2 = true;
                }
                res |= $$_tmp_measureVar2;
            }
        }
        {
            {
                boolean $$_tmp_measureVar3;
                if (CProver.nondetBoolean()) {
                    if (true && q0[0] == 0.0F && q0[1] == 0.0F && q0[4] == 0.0F && q0[5] == 0.0F && q0[8] == 0.0F && q0[9] == 0.0F && q0[12] == 0.0F && q0[13] == 0.0F) CProver.assume(false);
                    q0 = new float[]{q0[0], q0[1], 0.0F, 0.0F, q0[4], q0[5], 0.0F, 0.0F, q0[8], q0[9], 0.0F, 0.0F, q0[12], q0[13], 0.0F, 0.0F};
                    $$_tmp_measureVar3 = false;
                } else {
                    if (true && q0[2] == 0.0F && q0[3] == 0.0F && q0[6] == 0.0F && q0[7] == 0.0F && q0[10] == 0.0F && q0[11] == 0.0F && q0[14] == 0.0F && q0[15] == 0.0F) CProver.assume(false);
                    q0 = new float[]{0.0F, 0.0F, q0[2], q0[3], 0.0F, 0.0F, q0[6], q0[7], 0.0F, 0.0F, q0[10], q0[11], 0.0F, 0.0F, q0[14], q0[15]};
                    $$_tmp_measureVar3 = true;
                }
                res |= $$_tmp_measureVar3;
            }
        }
        return res;
    }
}
