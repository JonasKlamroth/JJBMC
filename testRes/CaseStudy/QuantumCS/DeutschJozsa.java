

public class DeutschJozsa {

    public DeutschJozsa() {
        super();
    }
    public static final int N = 3;
    /*@
      requires 0 <= f < (1 << N);
      ensures !\result <==> f == 0;
   */

    public boolean isBalanced(int f) {
        double[] q0 = new double[]{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
        double $$_measureVar1;
        double $$_measureVar2;
        {
            {
                q0 = new double[]{0.24999999, -0.24999999, 0.24999999, -0.24999999, 0.24999999, -0.24999999, 0.24999999, -0.24999999, 0.24999999, -0.24999999, 0.24999999, -0.24999999, 0.24999999, -0.24999999, 0.24999999, -0.24999999};
                if ((f & (1 << 0)) != 0) {
                    {
                    }
                    q0 = new double[]{0.24999999, -0.24999999, 0.24999999, -0.24999999, 0.24999999, -0.24999999, 0.24999999, -0.24999999, -0.24999999, 0.24999999, -0.24999999, 0.24999999, -0.24999999, 0.24999999, -0.24999999, 0.24999999};
                }
            }
        }
        {
            {
                if ((f & (1 << 1)) != 0) {
                    {
                    }
                    q0 = new double[]{q0[0], q0[1], q0[2], q0[3], q0[5], q0[4], q0[7], q0[6], q0[8], q0[9], q0[10], q0[11], q0[13], q0[12], q0[15], q0[14]};
                }
            }
        }
        {
            {
                if ((f & (1 << 2)) != 0) {
                    {
                    }
                    q0 = new double[]{q0[0], q0[1], q0[3], q0[2], q0[4], q0[5], q0[7], q0[6], q0[8], q0[9], q0[11], q0[10], q0[12], q0[13], q0[15], q0[14]};
                }
            }
        }
        boolean res = false;
        {
            {
                q0 = new double[]{0.35355338 * q0[0] + 0.35355338 * q0[2] + 0.35355338 * q0[4] + 0.35355338 * q0[6] + 0.35355338 * q0[8] + 0.35355338 * q0[10] + 0.35355338 * q0[12] + 0.35355338 * q0[14], 0.35355338 * q0[1] + 0.35355338 * q0[3] + 0.35355338 * q0[5] + 0.35355338 * q0[7] + 0.35355338 * q0[9] + 0.35355338 * q0[11] + 0.35355338 * q0[13] + 0.35355338 * q0[15], 0.35355338 * q0[0] + -0.35355338 * q0[2] + 0.35355338 * q0[4] + -0.35355338 * q0[6] + 0.35355338 * q0[8] + -0.35355338 * q0[10] + 0.35355338 * q0[12] + -0.35355338 * q0[14], 0.35355338 * q0[1] + -0.35355338 * q0[3] + 0.35355338 * q0[5] + -0.35355338 * q0[7] + 0.35355338 * q0[9] + -0.35355338 * q0[11] + 0.35355338 * q0[13] + -0.35355338 * q0[15], 0.35355338 * q0[0] + 0.35355338 * q0[2] + -0.35355338 * q0[4] + -0.35355338 * q0[6] + 0.35355338 * q0[8] + 0.35355338 * q0[10] + -0.35355338 * q0[12] + -0.35355338 * q0[14], 0.35355338 * q0[1] + 0.35355338 * q0[3] + -0.35355338 * q0[5] + -0.35355338 * q0[7] + 0.35355338 * q0[9] + 0.35355338 * q0[11] + -0.35355338 * q0[13] + -0.35355338 * q0[15], 0.35355338 * q0[0] + -0.35355338 * q0[2] + -0.35355338 * q0[4] + 0.35355338 * q0[6] + 0.35355338 * q0[8] + -0.35355338 * q0[10] + -0.35355338 * q0[12] + 0.35355338 * q0[14], 0.35355338 * q0[1] + -0.35355338 * q0[3] + -0.35355338 * q0[5] + 0.35355338 * q0[7] + 0.35355338 * q0[9] + -0.35355338 * q0[11] + -0.35355338 * q0[13] + 0.35355338 * q0[15], 0.35355338 * q0[0] + 0.35355338 * q0[2] + 0.35355338 * q0[4] + 0.35355338 * q0[6] + -0.35355338 * q0[8] + -0.35355338 * q0[10] + -0.35355338 * q0[12] + -0.35355338 * q0[14], 0.35355338 * q0[1] + 0.35355338 * q0[3] + 0.35355338 * q0[5] + 0.35355338 * q0[7] + -0.35355338 * q0[9] + -0.35355338 * q0[11] + -0.35355338 * q0[13] + -0.35355338 * q0[15], 0.35355338 * q0[0] + -0.35355338 * q0[2] + 0.35355338 * q0[4] + -0.35355338 * q0[6] + -0.35355338 * q0[8] + 0.35355338 * q0[10] + -0.35355338 * q0[12] + 0.35355338 * q0[14], 0.35355338 * q0[1] + -0.35355338 * q0[3] + 0.35355338 * q0[5] + -0.35355338 * q0[7] + -0.35355338 * q0[9] + 0.35355338 * q0[11] + -0.35355338 * q0[13] + 0.35355338 * q0[15], 0.35355338 * q0[0] + 0.35355338 * q0[2] + -0.35355338 * q0[4] + -0.35355338 * q0[6] + -0.35355338 * q0[8] + -0.35355338 * q0[10] + 0.35355338 * q0[12] + 0.35355338 * q0[14], 0.35355338 * q0[1] + 0.35355338 * q0[3] + -0.35355338 * q0[5] + -0.35355338 * q0[7] + -0.35355338 * q0[9] + -0.35355338 * q0[11] + 0.35355338 * q0[13] + 0.35355338 * q0[15], 0.35355338 * q0[0] + -0.35355338 * q0[2] + -0.35355338 * q0[4] + 0.35355338 * q0[6] + -0.35355338 * q0[8] + 0.35355338 * q0[10] + 0.35355338 * q0[12] + -0.35355338 * q0[14], 0.35355338 * q0[1] + -0.35355338 * q0[3] + -0.35355338 * q0[5] + 0.35355338 * q0[7] + -0.35355338 * q0[9] + 0.35355338 * q0[11] + 0.35355338 * q0[13] + -0.35355338 * q0[15]};
                boolean $$_tmp_measureVar1;
                $$_measureVar1 = q0[0] * q0[0] + q0[1] * q0[1] + q0[2] * q0[2] + q0[3] * q0[3] + q0[4] * q0[4] + q0[5] * q0[5] + q0[6] * q0[6] + q0[7] * q0[7];
                $$_measureVar2 = q0[8] * q0[8] + q0[9] * q0[9] + q0[10] * q0[10] + q0[11] * q0[11] + q0[12] * q0[12] + q0[13] * q0[13] + q0[14] * q0[14] + q0[15] * q0[15];
                if ($$_measureVar2 > $$_measureVar1) {
                    q0 = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, q0[8], q0[9], q0[10], q0[11], q0[12], q0[13], q0[14], q0[15]};
                    $$_tmp_measureVar1 = true;
                    assert $$_measureVar2 > $$_measureVar1 + 1.440004E-5;
                } else {
                    q0 = new double[]{q0[0], q0[1], q0[2], q0[3], q0[4], q0[5], q0[6], q0[7], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
                    $$_tmp_measureVar1 = false;
                    assert $$_measureVar1 > $$_measureVar2 + 1.440004E-5;
                }
                res |= $$_tmp_measureVar1;
            }
        }
        {
            {
                boolean $$_tmp_measureVar2;
                $$_measureVar1 = q0[0] * q0[0] + q0[1] * q0[1] + q0[2] * q0[2] + q0[3] * q0[3] + q0[8] * q0[8] + q0[9] * q0[9] + q0[10] * q0[10] + q0[11] * q0[11];
                $$_measureVar2 = q0[4] * q0[4] + q0[5] * q0[5] + q0[6] * q0[6] + q0[7] * q0[7] + q0[12] * q0[12] + q0[13] * q0[13] + q0[14] * q0[14] + q0[15] * q0[15];
                if ($$_measureVar2 > $$_measureVar1) {
                    q0 = new double[]{0.0, 0.0, 0.0, 0.0, q0[4], q0[5], q0[6], q0[7], 0.0, 0.0, 0.0, 0.0, q0[12], q0[13], q0[14], q0[15]};
                    $$_tmp_measureVar2 = true;
                    assert $$_measureVar2 > $$_measureVar1 + 1.530004E-5;
                } else {
                    q0 = new double[]{q0[0], q0[1], q0[2], q0[3], 0.0, 0.0, 0.0, 0.0, q0[8], q0[9], q0[10], q0[11], 0.0, 0.0, 0.0, 0.0};
                    $$_tmp_measureVar2 = false;
                    assert $$_measureVar1 > $$_measureVar2 + 1.530004E-5;
                }
                res |= $$_tmp_measureVar2;
            }
        }
        {
            {
                boolean $$_tmp_measureVar3;
                $$_measureVar1 = q0[0] * q0[0] + q0[1] * q0[1] + q0[4] * q0[4] + q0[5] * q0[5] + q0[8] * q0[8] + q0[9] * q0[9] + q0[12] * q0[12] + q0[13] * q0[13];
                $$_measureVar2 = q0[2] * q0[2] + q0[3] * q0[3] + q0[6] * q0[6] + q0[7] * q0[7] + q0[10] * q0[10] + q0[11] * q0[11] + q0[14] * q0[14] + q0[15] * q0[15];
                if ($$_measureVar2 > $$_measureVar1) {
                    q0 = new double[]{0.0, 0.0, q0[2], q0[3], 0.0, 0.0, q0[6], q0[7], 0.0, 0.0, q0[10], q0[11], 0.0, 0.0, q0[14], q0[15]};
                    $$_tmp_measureVar3 = true;
                    assert $$_measureVar2 > $$_measureVar1 + 1.620004E-5;
                } else {
                    q0 = new double[]{q0[0], q0[1], 0.0, 0.0, q0[4], q0[5], 0.0, 0.0, q0[8], q0[9], 0.0, 0.0, q0[12], q0[13], 0.0, 0.0};
                    $$_tmp_measureVar3 = false;
                    assert $$_measureVar1 > $$_measureVar2 + 1.620004E-5;
                }
                res |= $$_tmp_measureVar3;
            }
        }
        return res;
    }
    /*@
      requires f != null && f.length == 1 << N;
      requires (\forall int i; 0 <= i && i < f.length; f[i]) || (\forall int j; 0 <= j && j < f.length; !f[j]) || count(f) == f.length / 2;
      ensures \result <==> (count(f) == f.length / 2);
   */

    public boolean isBalancedBroken(/*@ non_null */
            boolean[] f) {
        double[] q0 = new double[]{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
        double $$_measureVar1;
        double $$_measureVar2;
        int size = 1 << N + 1;
        /*@ non_null */
        double[][] oracle = getOracle(N, f);
        q0 = new double[]{0.35355338 * oracle[0][0] + 0.35355338 * oracle[0][2] + 0.35355338 * oracle[0][4] + 0.35355338 * oracle[0][6] + 0.35355338 * oracle[0][8] + 0.35355338 * oracle[0][10] + 0.35355338 * oracle[0][12] + 0.35355338 * oracle[0][14], 0.35355338 * oracle[1][0] + 0.35355338 * oracle[1][2] + 0.35355338 * oracle[1][4] + 0.35355338 * oracle[1][6] + 0.35355338 * oracle[1][8] + 0.35355338 * oracle[1][10] + 0.35355338 * oracle[1][12] + 0.35355338 * oracle[1][14], 0.35355338 * oracle[2][0] + 0.35355338 * oracle[2][2] + 0.35355338 * oracle[2][4] + 0.35355338 * oracle[2][6] + 0.35355338 * oracle[2][8] + 0.35355338 * oracle[2][10] + 0.35355338 * oracle[2][12] + 0.35355338 * oracle[2][14], 0.35355338 * oracle[3][0] + 0.35355338 * oracle[3][2] + 0.35355338 * oracle[3][4] + 0.35355338 * oracle[3][6] + 0.35355338 * oracle[3][8] + 0.35355338 * oracle[3][10] + 0.35355338 * oracle[3][12] + 0.35355338 * oracle[3][14], 0.35355338 * oracle[4][0] + 0.35355338 * oracle[4][2] + 0.35355338 * oracle[4][4] + 0.35355338 * oracle[4][6] + 0.35355338 * oracle[4][8] + 0.35355338 * oracle[4][10] + 0.35355338 * oracle[4][12] + 0.35355338 * oracle[4][14], 0.35355338 * oracle[5][0] + 0.35355338 * oracle[5][2] + 0.35355338 * oracle[5][4] + 0.35355338 * oracle[5][6] + 0.35355338 * oracle[5][8] + 0.35355338 * oracle[5][10] + 0.35355338 * oracle[5][12] + 0.35355338 * oracle[5][14], 0.35355338 * oracle[6][0] + 0.35355338 * oracle[6][2] + 0.35355338 * oracle[6][4] + 0.35355338 * oracle[6][6] + 0.35355338 * oracle[6][8] + 0.35355338 * oracle[6][10] + 0.35355338 * oracle[6][12] + 0.35355338 * oracle[6][14], 0.35355338 * oracle[7][0] + 0.35355338 * oracle[7][2] + 0.35355338 * oracle[7][4] + 0.35355338 * oracle[7][6] + 0.35355338 * oracle[7][8] + 0.35355338 * oracle[7][10] + 0.35355338 * oracle[7][12] + 0.35355338 * oracle[7][14], 0.35355338 * oracle[8][0] + 0.35355338 * oracle[8][2] + 0.35355338 * oracle[8][4] + 0.35355338 * oracle[8][6] + 0.35355338 * oracle[8][8] + 0.35355338 * oracle[8][10] + 0.35355338 * oracle[8][12] + 0.35355338 * oracle[8][14], 0.35355338 * oracle[9][0] + 0.35355338 * oracle[9][2] + 0.35355338 * oracle[9][4] + 0.35355338 * oracle[9][6] + 0.35355338 * oracle[9][8] + 0.35355338 * oracle[9][10] + 0.35355338 * oracle[9][12] + 0.35355338 * oracle[9][14], 0.35355338 * oracle[10][0] + 0.35355338 * oracle[10][2] + 0.35355338 * oracle[10][4] + 0.35355338 * oracle[10][6] + 0.35355338 * oracle[10][8] + 0.35355338 * oracle[10][10] + 0.35355338 * oracle[10][12] + 0.35355338 * oracle[10][14], 0.35355338 * oracle[11][0] + 0.35355338 * oracle[11][2] + 0.35355338 * oracle[11][4] + 0.35355338 * oracle[11][6] + 0.35355338 * oracle[11][8] + 0.35355338 * oracle[11][10] + 0.35355338 * oracle[11][12] + 0.35355338 * oracle[11][14], 0.35355338 * oracle[12][0] + 0.35355338 * oracle[12][2] + 0.35355338 * oracle[12][4] + 0.35355338 * oracle[12][6] + 0.35355338 * oracle[12][8] + 0.35355338 * oracle[12][10] + 0.35355338 * oracle[12][12] + 0.35355338 * oracle[12][14], 0.35355338 * oracle[13][0] + 0.35355338 * oracle[13][2] + 0.35355338 * oracle[13][4] + 0.35355338 * oracle[13][6] + 0.35355338 * oracle[13][8] + 0.35355338 * oracle[13][10] + 0.35355338 * oracle[13][12] + 0.35355338 * oracle[13][14], 0.35355338 * oracle[14][0] + 0.35355338 * oracle[14][2] + 0.35355338 * oracle[14][4] + 0.35355338 * oracle[14][6] + 0.35355338 * oracle[14][8] + 0.35355338 * oracle[14][10] + 0.35355338 * oracle[14][12] + 0.35355338 * oracle[14][14], 0.35355338 * oracle[15][0] + 0.35355338 * oracle[15][2] + 0.35355338 * oracle[15][4] + 0.35355338 * oracle[15][6] + 0.35355338 * oracle[15][8] + 0.35355338 * oracle[15][10] + 0.35355338 * oracle[15][12] + 0.35355338 * oracle[15][14]};
        boolean res = false;
        {
            {
                q0 = new double[]{0.35355338 * q0[0] + 0.35355338 * q0[2] + 0.35355338 * q0[4] + 0.35355338 * q0[6] + 0.35355338 * q0[8] + 0.35355338 * q0[10] + 0.35355338 * q0[12] + 0.35355338 * q0[14], 0.35355338 * q0[1] + 0.35355338 * q0[3] + 0.35355338 * q0[5] + 0.35355338 * q0[7] + 0.35355338 * q0[9] + 0.35355338 * q0[11] + 0.35355338 * q0[13] + 0.35355338 * q0[15], 0.35355338 * q0[0] + -0.35355338 * q0[2] + 0.35355338 * q0[4] + -0.35355338 * q0[6] + 0.35355338 * q0[8] + -0.35355338 * q0[10] + 0.35355338 * q0[12] + -0.35355338 * q0[14], 0.35355338 * q0[1] + -0.35355338 * q0[3] + 0.35355338 * q0[5] + -0.35355338 * q0[7] + 0.35355338 * q0[9] + -0.35355338 * q0[11] + 0.35355338 * q0[13] + -0.35355338 * q0[15], 0.35355338 * q0[0] + 0.35355338 * q0[2] + -0.35355338 * q0[4] + -0.35355338 * q0[6] + 0.35355338 * q0[8] + 0.35355338 * q0[10] + -0.35355338 * q0[12] + -0.35355338 * q0[14], 0.35355338 * q0[1] + 0.35355338 * q0[3] + -0.35355338 * q0[5] + -0.35355338 * q0[7] + 0.35355338 * q0[9] + 0.35355338 * q0[11] + -0.35355338 * q0[13] + -0.35355338 * q0[15], 0.35355338 * q0[0] + -0.35355338 * q0[2] + -0.35355338 * q0[4] + 0.35355338 * q0[6] + 0.35355338 * q0[8] + -0.35355338 * q0[10] + -0.35355338 * q0[12] + 0.35355338 * q0[14], 0.35355338 * q0[1] + -0.35355338 * q0[3] + -0.35355338 * q0[5] + 0.35355338 * q0[7] + 0.35355338 * q0[9] + -0.35355338 * q0[11] + -0.35355338 * q0[13] + 0.35355338 * q0[15], 0.35355338 * q0[0] + 0.35355338 * q0[2] + 0.35355338 * q0[4] + 0.35355338 * q0[6] + -0.35355338 * q0[8] + -0.35355338 * q0[10] + -0.35355338 * q0[12] + -0.35355338 * q0[14], 0.35355338 * q0[1] + 0.35355338 * q0[3] + 0.35355338 * q0[5] + 0.35355338 * q0[7] + -0.35355338 * q0[9] + -0.35355338 * q0[11] + -0.35355338 * q0[13] + -0.35355338 * q0[15], 0.35355338 * q0[0] + -0.35355338 * q0[2] + 0.35355338 * q0[4] + -0.35355338 * q0[6] + -0.35355338 * q0[8] + 0.35355338 * q0[10] + -0.35355338 * q0[12] + 0.35355338 * q0[14], 0.35355338 * q0[1] + -0.35355338 * q0[3] + 0.35355338 * q0[5] + -0.35355338 * q0[7] + -0.35355338 * q0[9] + 0.35355338 * q0[11] + -0.35355338 * q0[13] + 0.35355338 * q0[15], 0.35355338 * q0[0] + 0.35355338 * q0[2] + -0.35355338 * q0[4] + -0.35355338 * q0[6] + -0.35355338 * q0[8] + -0.35355338 * q0[10] + 0.35355338 * q0[12] + 0.35355338 * q0[14], 0.35355338 * q0[1] + 0.35355338 * q0[3] + -0.35355338 * q0[5] + -0.35355338 * q0[7] + -0.35355338 * q0[9] + -0.35355338 * q0[11] + 0.35355338 * q0[13] + 0.35355338 * q0[15], 0.35355338 * q0[0] + -0.35355338 * q0[2] + -0.35355338 * q0[4] + 0.35355338 * q0[6] + -0.35355338 * q0[8] + 0.35355338 * q0[10] + 0.35355338 * q0[12] + -0.35355338 * q0[14], 0.35355338 * q0[1] + -0.35355338 * q0[3] + -0.35355338 * q0[5] + 0.35355338 * q0[7] + -0.35355338 * q0[9] + 0.35355338 * q0[11] + 0.35355338 * q0[13] + -0.35355338 * q0[15]};
                boolean $$_tmp_measureVar4;
                $$_measureVar1 = q0[0] * q0[0] + q0[1] * q0[1] + q0[2] * q0[2] + q0[3] * q0[3] + q0[4] * q0[4] + q0[5] * q0[5] + q0[6] * q0[6] + q0[7] * q0[7];
                $$_measureVar2 = q0[8] * q0[8] + q0[9] * q0[9] + q0[10] * q0[10] + q0[11] * q0[11] + q0[12] * q0[12] + q0[13] * q0[13] + q0[14] * q0[14] + q0[15] * q0[15];
                if ($$_measureVar2 > $$_measureVar1) {
                    q0 = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, q0[8], q0[9], q0[10], q0[11], q0[12], q0[13], q0[14], q0[15]};
                    $$_tmp_measureVar4 = true;
                    assert $$_measureVar2 > $$_measureVar1 + 1.6020008E-4;
                } else {
                    q0 = new double[]{q0[0], q0[1], q0[2], q0[3], q0[4], q0[5], q0[6], q0[7], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
                    $$_tmp_measureVar4 = false;
                    assert $$_measureVar1 > $$_measureVar2 + 1.6020008E-4;
                }
                res |= $$_tmp_measureVar4;
            }
        }
        {
            {
                boolean $$_tmp_measureVar5;
                $$_measureVar1 = q0[0] * q0[0] + q0[1] * q0[1] + q0[2] * q0[2] + q0[3] * q0[3] + q0[8] * q0[8] + q0[9] * q0[9] + q0[10] * q0[10] + q0[11] * q0[11];
                $$_measureVar2 = q0[4] * q0[4] + q0[5] * q0[5] + q0[6] * q0[6] + q0[7] * q0[7] + q0[12] * q0[12] + q0[13] * q0[13] + q0[14] * q0[14] + q0[15] * q0[15];
                if ($$_measureVar2 > $$_measureVar1) {
                    q0 = new double[]{0.0, 0.0, 0.0, 0.0, q0[4], q0[5], q0[6], q0[7], 0.0, 0.0, 0.0, 0.0, q0[12], q0[13], q0[14], q0[15]};
                    $$_tmp_measureVar5 = true;
                    assert $$_measureVar2 > $$_measureVar1 + 1.6110009E-4;
                } else {
                    q0 = new double[]{q0[0], q0[1], q0[2], q0[3], 0.0, 0.0, 0.0, 0.0, q0[8], q0[9], q0[10], q0[11], 0.0, 0.0, 0.0, 0.0};
                    $$_tmp_measureVar5 = false;
                    assert $$_measureVar1 > $$_measureVar2 + 1.6110009E-4;
                }
                res |= $$_tmp_measureVar5;
            }
        }
        {
            {
                boolean $$_tmp_measureVar6;
                $$_measureVar1 = q0[0] * q0[0] + q0[1] * q0[1] + q0[4] * q0[4] + q0[5] * q0[5] + q0[8] * q0[8] + q0[9] * q0[9] + q0[12] * q0[12] + q0[13] * q0[13];
                $$_measureVar2 = q0[2] * q0[2] + q0[3] * q0[3] + q0[6] * q0[6] + q0[7] * q0[7] + q0[10] * q0[10] + q0[11] * q0[11] + q0[14] * q0[14] + q0[15] * q0[15];
                if ($$_measureVar2 > $$_measureVar1) {
                    q0 = new double[]{0.0, 0.0, q0[2], q0[3], 0.0, 0.0, q0[6], q0[7], 0.0, 0.0, q0[10], q0[11], 0.0, 0.0, q0[14], q0[15]};
                    $$_tmp_measureVar6 = true;
                    assert $$_measureVar2 > $$_measureVar1 + 1.6200008E-4;
                } else {
                    q0 = new double[]{q0[0], q0[1], 0.0, 0.0, q0[4], q0[5], 0.0, 0.0, q0[8], q0[9], 0.0, 0.0, q0[12], q0[13], 0.0, 0.0};
                    $$_tmp_measureVar6 = false;
                    assert $$_measureVar1 > $$_measureVar2 + 1.6200008E-4;
                }
                res |= $$_tmp_measureVar6;
            }
        }
        return res;
    }

    public double[][] getOracle(int N, /*@ non_null */
                               boolean[] f) {
        int size = 1 << N + 1;
        /*@ non_null */
        double[][] oracle = new double[size][size];
        for (int i = 0; i < size; ++i) {
            for (int j = 0; j < size; ++j) {
                oracle[i][j] = 0.0;
                double val = f[i / 2] ? 1.0 : 0.0;
                if (i == j) {
                    {
                        oracle[i][j] = 1.0 - val;
                    }
                }
                int even = (i % 2) * 2 - 1;
                if (i == j + even) {
                    {
                        oracle[i][j] = val;
                    }
                }
            }
        }
        return oracle;
    }

    /*@ pure */
    public static int count(/*@ non_null */
            boolean[] f) {
        int i = 0;
        for (int j = 0; j < f.length; j++) {
            if (f[j]) {
                {
                    ++i;
                }
            }
        }
        return i;
    }
}
