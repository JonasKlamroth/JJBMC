

import org.cprover.CProver;

public class BernsteinVaziraniQiskit {

  public BernsteinVaziraniQiskit() {
    super();
  }
  public static final int N = 6;
    /*@
      requires 0 <= a < (1 << N);
      ensures \result == a;
      assignable \nothing;
   */

  public int findHiddenShift(int a) {
    float[] q0 = new float[]{1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F};
    {
      {
      }
    }
    {
      {
      }
    }
    {
      {
      }
    }
    {
      {
      }
    }
    {
      {
      }
    }
    {
      {
      }
    }
    {
      {
        q0 = new float[]{};
        if ((a & (1 << 0)) != 0) {
          {
          }
          q0 = new float[]{};
        }
      }
    }
    {
      {
        if ((a & (1 << 1)) != 0) {
          {
          }
          q0 = new float[]{q0[0], q0[1], q0[2], q0[3], q0[4], q0[5], q0[6], q0[7], q0[8], q0[9], q0[10], q0[11], q0[12], q0[13], q0[14], q0[15], -1.0F * q0[16], -1.0F * q0[17], -1.0F * q0[18], -1.0F * q0[19], -1.0F * q0[20], -1.0F * q0[21], -1.0F * q0[22], -1.0F * q0[23], -1.0F * q0[24], -1.0F * q0[25], -1.0F * q0[26], -1.0F * q0[27], -1.0F * q0[28], -1.0F * q0[29], -1.0F * q0[30], -1.0F * q0[31], q0[32], q0[33], q0[34], q0[35], q0[36], q0[37], q0[38], q0[39], q0[40], q0[41], q0[42], q0[43], q0[44], q0[45], q0[46], q0[47], -1.0F * q0[48], -1.0F * q0[49], -1.0F * q0[50], -1.0F * q0[51], -1.0F * q0[52], -1.0F * q0[53], -1.0F * q0[54], -1.0F * q0[55], -1.0F * q0[56], -1.0F * q0[57], -1.0F * q0[58], -1.0F * q0[59], -1.0F * q0[60], -1.0F * q0[61], -1.0F * q0[62], -1.0F * q0[63]};
        }
      }
    }
    {
      {
        if ((a & (1 << 2)) != 0) {
          {
          }
          q0 = new float[]{q0[0], q0[1], q0[2], q0[3], q0[4], q0[5], q0[6], q0[7], -1.0F * q0[8], -1.0F * q0[9], -1.0F * q0[10], -1.0F * q0[11], -1.0F * q0[12], -1.0F * q0[13], -1.0F * q0[14], -1.0F * q0[15], q0[16], q0[17], q0[18], q0[19], q0[20], q0[21], q0[22], q0[23], -1.0F * q0[24], -1.0F * q0[25], -1.0F * q0[26], -1.0F * q0[27], -1.0F * q0[28], -1.0F * q0[29], -1.0F * q0[30], -1.0F * q0[31], q0[32], q0[33], q0[34], q0[35], q0[36], q0[37], q0[38], q0[39], -1.0F * q0[40], -1.0F * q0[41], -1.0F * q0[42], -1.0F * q0[43], -1.0F * q0[44], -1.0F * q0[45], -1.0F * q0[46], -1.0F * q0[47], q0[48], q0[49], q0[50], q0[51], q0[52], q0[53], q0[54], q0[55], -1.0F * q0[56], -1.0F * q0[57], -1.0F * q0[58], -1.0F * q0[59], -1.0F * q0[60], -1.0F * q0[61], -1.0F * q0[62], -1.0F * q0[63]};
        }
      }
    }
    {
      {
        if ((a & (1 << 3)) != 0) {
          {
          }
          q0 = new float[]{q0[0], q0[1], q0[2], q0[3], -1.0F * q0[4], -1.0F * q0[5], -1.0F * q0[6], -1.0F * q0[7], q0[8], q0[9], q0[10], q0[11], -1.0F * q0[12], -1.0F * q0[13], -1.0F * q0[14], -1.0F * q0[15], q0[16], q0[17], q0[18], q0[19], -1.0F * q0[20], -1.0F * q0[21], -1.0F * q0[22], -1.0F * q0[23], q0[24], q0[25], q0[26], q0[27], -1.0F * q0[28], -1.0F * q0[29], -1.0F * q0[30], -1.0F * q0[31], q0[32], q0[33], q0[34], q0[35], -1.0F * q0[36], -1.0F * q0[37], -1.0F * q0[38], -1.0F * q0[39], q0[40], q0[41], q0[42], q0[43], -1.0F * q0[44], -1.0F * q0[45], -1.0F * q0[46], -1.0F * q0[47], q0[48], q0[49], q0[50], q0[51], -1.0F * q0[52], -1.0F * q0[53], -1.0F * q0[54], -1.0F * q0[55], q0[56], q0[57], q0[58], q0[59], -1.0F * q0[60], -1.0F * q0[61], -1.0F * q0[62], -1.0F * q0[63]};
        }
      }
    }
    {
      {
        if ((a & (1 << 4)) != 0) {
          {
          }
          q0 = new float[]{q0[0], q0[1], -1.0F * q0[2], -1.0F * q0[3], q0[4], q0[5], -1.0F * q0[6], -1.0F * q0[7], q0[8], q0[9], -1.0F * q0[10], -1.0F * q0[11], q0[12], q0[13], -1.0F * q0[14], -1.0F * q0[15], q0[16], q0[17], -1.0F * q0[18], -1.0F * q0[19], q0[20], q0[21], -1.0F * q0[22], -1.0F * q0[23], q0[24], q0[25], -1.0F * q0[26], -1.0F * q0[27], q0[28], q0[29], -1.0F * q0[30], -1.0F * q0[31], q0[32], q0[33], -1.0F * q0[34], -1.0F * q0[35], q0[36], q0[37], -1.0F * q0[38], -1.0F * q0[39], q0[40], q0[41], -1.0F * q0[42], -1.0F * q0[43], q0[44], q0[45], -1.0F * q0[46], -1.0F * q0[47], q0[48], q0[49], -1.0F * q0[50], -1.0F * q0[51], q0[52], q0[53], -1.0F * q0[54], -1.0F * q0[55], q0[56], q0[57], -1.0F * q0[58], -1.0F * q0[59], q0[60], q0[61], -1.0F * q0[62], -1.0F * q0[63]};
        }
      }
    }
    {
      {
        if ((a & (1 << 5)) != 0) {
          {
          }
          q0 = new float[]{q0[0], -1.0F * q0[1], q0[2], -1.0F * q0[3], q0[4], -1.0F * q0[5], q0[6], -1.0F * q0[7], q0[8], -1.0F * q0[9], q0[10], -1.0F * q0[11], q0[12], -1.0F * q0[13], q0[14], -1.0F * q0[15], q0[16], -1.0F * q0[17], q0[18], -1.0F * q0[19], q0[20], -1.0F * q0[21], q0[22], -1.0F * q0[23], q0[24], -1.0F * q0[25], q0[26], -1.0F * q0[27], q0[28], -1.0F * q0[29], q0[30], -1.0F * q0[31], q0[32], -1.0F * q0[33], q0[34], -1.0F * q0[35], q0[36], -1.0F * q0[37], q0[38], -1.0F * q0[39], q0[40], -1.0F * q0[41], q0[42], -1.0F * q0[43], q0[44], -1.0F * q0[45], q0[46], -1.0F * q0[47], q0[48], -1.0F * q0[49], q0[50], -1.0F * q0[51], q0[52], -1.0F * q0[53], q0[54], -1.0F * q0[55], q0[56], -1.0F * q0[57], q0[58], -1.0F * q0[59], q0[60], -1.0F * q0[61], q0[62], -1.0F * q0[63]};
        }
      }
    }
    {
      {
      }
    }
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[32], 0.70710677F * q0[1] + 0.70710677F * q0[33], 0.70710677F * q0[2] + 0.70710677F * q0[34], 0.70710677F * q0[3] + 0.70710677F * q0[35], 0.70710677F * q0[4] + 0.70710677F * q0[36], 0.70710677F * q0[5] + 0.70710677F * q0[37], 0.70710677F * q0[6] + 0.70710677F * q0[38], 0.70710677F * q0[7] + 0.70710677F * q0[39], 0.70710677F * q0[8] + 0.70710677F * q0[40], 0.70710677F * q0[9] + 0.70710677F * q0[41], 0.70710677F * q0[10] + 0.70710677F * q0[42], 0.70710677F * q0[11] + 0.70710677F * q0[43], 0.70710677F * q0[12] + 0.70710677F * q0[44], 0.70710677F * q0[13] + 0.70710677F * q0[45], 0.70710677F * q0[14] + 0.70710677F * q0[46], 0.70710677F * q0[15] + 0.70710677F * q0[47], 0.70710677F * q0[16] + 0.70710677F * q0[48], 0.70710677F * q0[17] + 0.70710677F * q0[49], 0.70710677F * q0[18] + 0.70710677F * q0[50], 0.70710677F * q0[19] + 0.70710677F * q0[51], 0.70710677F * q0[20] + 0.70710677F * q0[52], 0.70710677F * q0[21] + 0.70710677F * q0[53], 0.70710677F * q0[22] + 0.70710677F * q0[54], 0.70710677F * q0[23] + 0.70710677F * q0[55], 0.70710677F * q0[24] + 0.70710677F * q0[56], 0.70710677F * q0[25] + 0.70710677F * q0[57], 0.70710677F * q0[26] + 0.70710677F * q0[58], 0.70710677F * q0[27] + 0.70710677F * q0[59], 0.70710677F * q0[28] + 0.70710677F * q0[60], 0.70710677F * q0[29] + 0.70710677F * q0[61], 0.70710677F * q0[30] + 0.70710677F * q0[62], 0.70710677F * q0[31] + 0.70710677F * q0[63], 0.70710677F * q0[0] + -0.70710677F * q0[32], 0.70710677F * q0[1] + -0.70710677F * q0[33], 0.70710677F * q0[2] + -0.70710677F * q0[34], 0.70710677F * q0[3] + -0.70710677F * q0[35], 0.70710677F * q0[4] + -0.70710677F * q0[36], 0.70710677F * q0[5] + -0.70710677F * q0[37], 0.70710677F * q0[6] + -0.70710677F * q0[38], 0.70710677F * q0[7] + -0.70710677F * q0[39], 0.70710677F * q0[8] + -0.70710677F * q0[40], 0.70710677F * q0[9] + -0.70710677F * q0[41], 0.70710677F * q0[10] + -0.70710677F * q0[42], 0.70710677F * q0[11] + -0.70710677F * q0[43], 0.70710677F * q0[12] + -0.70710677F * q0[44], 0.70710677F * q0[13] + -0.70710677F * q0[45], 0.70710677F * q0[14] + -0.70710677F * q0[46], 0.70710677F * q0[15] + -0.70710677F * q0[47], 0.70710677F * q0[16] + -0.70710677F * q0[48], 0.70710677F * q0[17] + -0.70710677F * q0[49], 0.70710677F * q0[18] + -0.70710677F * q0[50], 0.70710677F * q0[19] + -0.70710677F * q0[51], 0.70710677F * q0[20] + -0.70710677F * q0[52], 0.70710677F * q0[21] + -0.70710677F * q0[53], 0.70710677F * q0[22] + -0.70710677F * q0[54], 0.70710677F * q0[23] + -0.70710677F * q0[55], 0.70710677F * q0[24] + -0.70710677F * q0[56], 0.70710677F * q0[25] + -0.70710677F * q0[57], 0.70710677F * q0[26] + -0.70710677F * q0[58], 0.70710677F * q0[27] + -0.70710677F * q0[59], 0.70710677F * q0[28] + -0.70710677F * q0[60], 0.70710677F * q0[29] + -0.70710677F * q0[61], 0.70710677F * q0[30] + -0.70710677F * q0[62], 0.70710677F * q0[31] + -0.70710677F * q0[63]};
      }
    }
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[16], 0.70710677F * q0[1] + 0.70710677F * q0[17], 0.70710677F * q0[2] + 0.70710677F * q0[18], 0.70710677F * q0[3] + 0.70710677F * q0[19], 0.70710677F * q0[4] + 0.70710677F * q0[20], 0.70710677F * q0[5] + 0.70710677F * q0[21], 0.70710677F * q0[6] + 0.70710677F * q0[22], 0.70710677F * q0[7] + 0.70710677F * q0[23], 0.70710677F * q0[8] + 0.70710677F * q0[24], 0.70710677F * q0[9] + 0.70710677F * q0[25], 0.70710677F * q0[10] + 0.70710677F * q0[26], 0.70710677F * q0[11] + 0.70710677F * q0[27], 0.70710677F * q0[12] + 0.70710677F * q0[28], 0.70710677F * q0[13] + 0.70710677F * q0[29], 0.70710677F * q0[14] + 0.70710677F * q0[30], 0.70710677F * q0[15] + 0.70710677F * q0[31], 0.70710677F * q0[0] + -0.70710677F * q0[16], 0.70710677F * q0[1] + -0.70710677F * q0[17], 0.70710677F * q0[2] + -0.70710677F * q0[18], 0.70710677F * q0[3] + -0.70710677F * q0[19], 0.70710677F * q0[4] + -0.70710677F * q0[20], 0.70710677F * q0[5] + -0.70710677F * q0[21], 0.70710677F * q0[6] + -0.70710677F * q0[22], 0.70710677F * q0[7] + -0.70710677F * q0[23], 0.70710677F * q0[8] + -0.70710677F * q0[24], 0.70710677F * q0[9] + -0.70710677F * q0[25], 0.70710677F * q0[10] + -0.70710677F * q0[26], 0.70710677F * q0[11] + -0.70710677F * q0[27], 0.70710677F * q0[12] + -0.70710677F * q0[28], 0.70710677F * q0[13] + -0.70710677F * q0[29], 0.70710677F * q0[14] + -0.70710677F * q0[30], 0.70710677F * q0[15] + -0.70710677F * q0[31], 0.70710677F * q0[32] + 0.70710677F * q0[48], 0.70710677F * q0[33] + 0.70710677F * q0[49], 0.70710677F * q0[34] + 0.70710677F * q0[50], 0.70710677F * q0[35] + 0.70710677F * q0[51], 0.70710677F * q0[36] + 0.70710677F * q0[52], 0.70710677F * q0[37] + 0.70710677F * q0[53], 0.70710677F * q0[38] + 0.70710677F * q0[54], 0.70710677F * q0[39] + 0.70710677F * q0[55], 0.70710677F * q0[40] + 0.70710677F * q0[56], 0.70710677F * q0[41] + 0.70710677F * q0[57], 0.70710677F * q0[42] + 0.70710677F * q0[58], 0.70710677F * q0[43] + 0.70710677F * q0[59], 0.70710677F * q0[44] + 0.70710677F * q0[60], 0.70710677F * q0[45] + 0.70710677F * q0[61], 0.70710677F * q0[46] + 0.70710677F * q0[62], 0.70710677F * q0[47] + 0.70710677F * q0[63], 0.70710677F * q0[32] + -0.70710677F * q0[48], 0.70710677F * q0[33] + -0.70710677F * q0[49], 0.70710677F * q0[34] + -0.70710677F * q0[50], 0.70710677F * q0[35] + -0.70710677F * q0[51], 0.70710677F * q0[36] + -0.70710677F * q0[52], 0.70710677F * q0[37] + -0.70710677F * q0[53], 0.70710677F * q0[38] + -0.70710677F * q0[54], 0.70710677F * q0[39] + -0.70710677F * q0[55], 0.70710677F * q0[40] + -0.70710677F * q0[56], 0.70710677F * q0[41] + -0.70710677F * q0[57], 0.70710677F * q0[42] + -0.70710677F * q0[58], 0.70710677F * q0[43] + -0.70710677F * q0[59], 0.70710677F * q0[44] + -0.70710677F * q0[60], 0.70710677F * q0[45] + -0.70710677F * q0[61], 0.70710677F * q0[46] + -0.70710677F * q0[62], 0.70710677F * q0[47] + -0.70710677F * q0[63]};
      }
    }
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[8], 0.70710677F * q0[1] + 0.70710677F * q0[9], 0.70710677F * q0[2] + 0.70710677F * q0[10], 0.70710677F * q0[3] + 0.70710677F * q0[11], 0.70710677F * q0[4] + 0.70710677F * q0[12], 0.70710677F * q0[5] + 0.70710677F * q0[13], 0.70710677F * q0[6] + 0.70710677F * q0[14], 0.70710677F * q0[7] + 0.70710677F * q0[15], 0.70710677F * q0[0] + -0.70710677F * q0[8], 0.70710677F * q0[1] + -0.70710677F * q0[9], 0.70710677F * q0[2] + -0.70710677F * q0[10], 0.70710677F * q0[3] + -0.70710677F * q0[11], 0.70710677F * q0[4] + -0.70710677F * q0[12], 0.70710677F * q0[5] + -0.70710677F * q0[13], 0.70710677F * q0[6] + -0.70710677F * q0[14], 0.70710677F * q0[7] + -0.70710677F * q0[15], 0.70710677F * q0[16] + 0.70710677F * q0[24], 0.70710677F * q0[17] + 0.70710677F * q0[25], 0.70710677F * q0[18] + 0.70710677F * q0[26], 0.70710677F * q0[19] + 0.70710677F * q0[27], 0.70710677F * q0[20] + 0.70710677F * q0[28], 0.70710677F * q0[21] + 0.70710677F * q0[29], 0.70710677F * q0[22] + 0.70710677F * q0[30], 0.70710677F * q0[23] + 0.70710677F * q0[31], 0.70710677F * q0[16] + -0.70710677F * q0[24], 0.70710677F * q0[17] + -0.70710677F * q0[25], 0.70710677F * q0[18] + -0.70710677F * q0[26], 0.70710677F * q0[19] + -0.70710677F * q0[27], 0.70710677F * q0[20] + -0.70710677F * q0[28], 0.70710677F * q0[21] + -0.70710677F * q0[29], 0.70710677F * q0[22] + -0.70710677F * q0[30], 0.70710677F * q0[23] + -0.70710677F * q0[31], 0.70710677F * q0[32] + 0.70710677F * q0[40], 0.70710677F * q0[33] + 0.70710677F * q0[41], 0.70710677F * q0[34] + 0.70710677F * q0[42], 0.70710677F * q0[35] + 0.70710677F * q0[43], 0.70710677F * q0[36] + 0.70710677F * q0[44], 0.70710677F * q0[37] + 0.70710677F * q0[45], 0.70710677F * q0[38] + 0.70710677F * q0[46], 0.70710677F * q0[39] + 0.70710677F * q0[47], 0.70710677F * q0[32] + -0.70710677F * q0[40], 0.70710677F * q0[33] + -0.70710677F * q0[41], 0.70710677F * q0[34] + -0.70710677F * q0[42], 0.70710677F * q0[35] + -0.70710677F * q0[43], 0.70710677F * q0[36] + -0.70710677F * q0[44], 0.70710677F * q0[37] + -0.70710677F * q0[45], 0.70710677F * q0[38] + -0.70710677F * q0[46], 0.70710677F * q0[39] + -0.70710677F * q0[47], 0.70710677F * q0[48] + 0.70710677F * q0[56], 0.70710677F * q0[49] + 0.70710677F * q0[57], 0.70710677F * q0[50] + 0.70710677F * q0[58], 0.70710677F * q0[51] + 0.70710677F * q0[59], 0.70710677F * q0[52] + 0.70710677F * q0[60], 0.70710677F * q0[53] + 0.70710677F * q0[61], 0.70710677F * q0[54] + 0.70710677F * q0[62], 0.70710677F * q0[55] + 0.70710677F * q0[63], 0.70710677F * q0[48] + -0.70710677F * q0[56], 0.70710677F * q0[49] + -0.70710677F * q0[57], 0.70710677F * q0[50] + -0.70710677F * q0[58], 0.70710677F * q0[51] + -0.70710677F * q0[59], 0.70710677F * q0[52] + -0.70710677F * q0[60], 0.70710677F * q0[53] + -0.70710677F * q0[61], 0.70710677F * q0[54] + -0.70710677F * q0[62], 0.70710677F * q0[55] + -0.70710677F * q0[63]};
      }
    }
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[4], 0.70710677F * q0[1] + 0.70710677F * q0[5], 0.70710677F * q0[2] + 0.70710677F * q0[6], 0.70710677F * q0[3] + 0.70710677F * q0[7], 0.70710677F * q0[0] + -0.70710677F * q0[4], 0.70710677F * q0[1] + -0.70710677F * q0[5], 0.70710677F * q0[2] + -0.70710677F * q0[6], 0.70710677F * q0[3] + -0.70710677F * q0[7], 0.70710677F * q0[8] + 0.70710677F * q0[12], 0.70710677F * q0[9] + 0.70710677F * q0[13], 0.70710677F * q0[10] + 0.70710677F * q0[14], 0.70710677F * q0[11] + 0.70710677F * q0[15], 0.70710677F * q0[8] + -0.70710677F * q0[12], 0.70710677F * q0[9] + -0.70710677F * q0[13], 0.70710677F * q0[10] + -0.70710677F * q0[14], 0.70710677F * q0[11] + -0.70710677F * q0[15], 0.70710677F * q0[16] + 0.70710677F * q0[20], 0.70710677F * q0[17] + 0.70710677F * q0[21], 0.70710677F * q0[18] + 0.70710677F * q0[22], 0.70710677F * q0[19] + 0.70710677F * q0[23], 0.70710677F * q0[16] + -0.70710677F * q0[20], 0.70710677F * q0[17] + -0.70710677F * q0[21], 0.70710677F * q0[18] + -0.70710677F * q0[22], 0.70710677F * q0[19] + -0.70710677F * q0[23], 0.70710677F * q0[24] + 0.70710677F * q0[28], 0.70710677F * q0[25] + 0.70710677F * q0[29], 0.70710677F * q0[26] + 0.70710677F * q0[30], 0.70710677F * q0[27] + 0.70710677F * q0[31], 0.70710677F * q0[24] + -0.70710677F * q0[28], 0.70710677F * q0[25] + -0.70710677F * q0[29], 0.70710677F * q0[26] + -0.70710677F * q0[30], 0.70710677F * q0[27] + -0.70710677F * q0[31], 0.70710677F * q0[32] + 0.70710677F * q0[36], 0.70710677F * q0[33] + 0.70710677F * q0[37], 0.70710677F * q0[34] + 0.70710677F * q0[38], 0.70710677F * q0[35] + 0.70710677F * q0[39], 0.70710677F * q0[32] + -0.70710677F * q0[36], 0.70710677F * q0[33] + -0.70710677F * q0[37], 0.70710677F * q0[34] + -0.70710677F * q0[38], 0.70710677F * q0[35] + -0.70710677F * q0[39], 0.70710677F * q0[40] + 0.70710677F * q0[44], 0.70710677F * q0[41] + 0.70710677F * q0[45], 0.70710677F * q0[42] + 0.70710677F * q0[46], 0.70710677F * q0[43] + 0.70710677F * q0[47], 0.70710677F * q0[40] + -0.70710677F * q0[44], 0.70710677F * q0[41] + -0.70710677F * q0[45], 0.70710677F * q0[42] + -0.70710677F * q0[46], 0.70710677F * q0[43] + -0.70710677F * q0[47], 0.70710677F * q0[48] + 0.70710677F * q0[52], 0.70710677F * q0[49] + 0.70710677F * q0[53], 0.70710677F * q0[50] + 0.70710677F * q0[54], 0.70710677F * q0[51] + 0.70710677F * q0[55], 0.70710677F * q0[48] + -0.70710677F * q0[52], 0.70710677F * q0[49] + -0.70710677F * q0[53], 0.70710677F * q0[50] + -0.70710677F * q0[54], 0.70710677F * q0[51] + -0.70710677F * q0[55], 0.70710677F * q0[56] + 0.70710677F * q0[60], 0.70710677F * q0[57] + 0.70710677F * q0[61], 0.70710677F * q0[58] + 0.70710677F * q0[62], 0.70710677F * q0[59] + 0.70710677F * q0[63], 0.70710677F * q0[56] + -0.70710677F * q0[60], 0.70710677F * q0[57] + -0.70710677F * q0[61], 0.70710677F * q0[58] + -0.70710677F * q0[62], 0.70710677F * q0[59] + -0.70710677F * q0[63]};
      }
    }
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[2], 0.70710677F * q0[1] + 0.70710677F * q0[3], 0.70710677F * q0[0] + -0.70710677F * q0[2], 0.70710677F * q0[1] + -0.70710677F * q0[3], 0.70710677F * q0[4] + 0.70710677F * q0[6], 0.70710677F * q0[5] + 0.70710677F * q0[7], 0.70710677F * q0[4] + -0.70710677F * q0[6], 0.70710677F * q0[5] + -0.70710677F * q0[7], 0.70710677F * q0[8] + 0.70710677F * q0[10], 0.70710677F * q0[9] + 0.70710677F * q0[11], 0.70710677F * q0[8] + -0.70710677F * q0[10], 0.70710677F * q0[9] + -0.70710677F * q0[11], 0.70710677F * q0[12] + 0.70710677F * q0[14], 0.70710677F * q0[13] + 0.70710677F * q0[15], 0.70710677F * q0[12] + -0.70710677F * q0[14], 0.70710677F * q0[13] + -0.70710677F * q0[15], 0.70710677F * q0[16] + 0.70710677F * q0[18], 0.70710677F * q0[17] + 0.70710677F * q0[19], 0.70710677F * q0[16] + -0.70710677F * q0[18], 0.70710677F * q0[17] + -0.70710677F * q0[19], 0.70710677F * q0[20] + 0.70710677F * q0[22], 0.70710677F * q0[21] + 0.70710677F * q0[23], 0.70710677F * q0[20] + -0.70710677F * q0[22], 0.70710677F * q0[21] + -0.70710677F * q0[23], 0.70710677F * q0[24] + 0.70710677F * q0[26], 0.70710677F * q0[25] + 0.70710677F * q0[27], 0.70710677F * q0[24] + -0.70710677F * q0[26], 0.70710677F * q0[25] + -0.70710677F * q0[27], 0.70710677F * q0[28] + 0.70710677F * q0[30], 0.70710677F * q0[29] + 0.70710677F * q0[31], 0.70710677F * q0[28] + -0.70710677F * q0[30], 0.70710677F * q0[29] + -0.70710677F * q0[31], 0.70710677F * q0[32] + 0.70710677F * q0[34], 0.70710677F * q0[33] + 0.70710677F * q0[35], 0.70710677F * q0[32] + -0.70710677F * q0[34], 0.70710677F * q0[33] + -0.70710677F * q0[35], 0.70710677F * q0[36] + 0.70710677F * q0[38], 0.70710677F * q0[37] + 0.70710677F * q0[39], 0.70710677F * q0[36] + -0.70710677F * q0[38], 0.70710677F * q0[37] + -0.70710677F * q0[39], 0.70710677F * q0[40] + 0.70710677F * q0[42], 0.70710677F * q0[41] + 0.70710677F * q0[43], 0.70710677F * q0[40] + -0.70710677F * q0[42], 0.70710677F * q0[41] + -0.70710677F * q0[43], 0.70710677F * q0[44] + 0.70710677F * q0[46], 0.70710677F * q0[45] + 0.70710677F * q0[47], 0.70710677F * q0[44] + -0.70710677F * q0[46], 0.70710677F * q0[45] + -0.70710677F * q0[47], 0.70710677F * q0[48] + 0.70710677F * q0[50], 0.70710677F * q0[49] + 0.70710677F * q0[51], 0.70710677F * q0[48] + -0.70710677F * q0[50], 0.70710677F * q0[49] + -0.70710677F * q0[51], 0.70710677F * q0[52] + 0.70710677F * q0[54], 0.70710677F * q0[53] + 0.70710677F * q0[55], 0.70710677F * q0[52] + -0.70710677F * q0[54], 0.70710677F * q0[53] + -0.70710677F * q0[55], 0.70710677F * q0[56] + 0.70710677F * q0[58], 0.70710677F * q0[57] + 0.70710677F * q0[59], 0.70710677F * q0[56] + -0.70710677F * q0[58], 0.70710677F * q0[57] + -0.70710677F * q0[59], 0.70710677F * q0[60] + 0.70710677F * q0[62], 0.70710677F * q0[61] + 0.70710677F * q0[63], 0.70710677F * q0[60] + -0.70710677F * q0[62], 0.70710677F * q0[61] + -0.70710677F * q0[63]};
      }
    }
    int res = 0;
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[1], 0.70710677F * q0[0] + -0.70710677F * q0[1], 0.70710677F * q0[2] + 0.70710677F * q0[3], 0.70710677F * q0[2] + -0.70710677F * q0[3], 0.70710677F * q0[4] + 0.70710677F * q0[5], 0.70710677F * q0[4] + -0.70710677F * q0[5], 0.70710677F * q0[6] + 0.70710677F * q0[7], 0.70710677F * q0[6] + -0.70710677F * q0[7], 0.70710677F * q0[8] + 0.70710677F * q0[9], 0.70710677F * q0[8] + -0.70710677F * q0[9], 0.70710677F * q0[10] + 0.70710677F * q0[11], 0.70710677F * q0[10] + -0.70710677F * q0[11], 0.70710677F * q0[12] + 0.70710677F * q0[13], 0.70710677F * q0[12] + -0.70710677F * q0[13], 0.70710677F * q0[14] + 0.70710677F * q0[15], 0.70710677F * q0[14] + -0.70710677F * q0[15], 0.70710677F * q0[16] + 0.70710677F * q0[17], 0.70710677F * q0[16] + -0.70710677F * q0[17], 0.70710677F * q0[18] + 0.70710677F * q0[19], 0.70710677F * q0[18] + -0.70710677F * q0[19], 0.70710677F * q0[20] + 0.70710677F * q0[21], 0.70710677F * q0[20] + -0.70710677F * q0[21], 0.70710677F * q0[22] + 0.70710677F * q0[23], 0.70710677F * q0[22] + -0.70710677F * q0[23], 0.70710677F * q0[24] + 0.70710677F * q0[25], 0.70710677F * q0[24] + -0.70710677F * q0[25], 0.70710677F * q0[26] + 0.70710677F * q0[27], 0.70710677F * q0[26] + -0.70710677F * q0[27], 0.70710677F * q0[28] + 0.70710677F * q0[29], 0.70710677F * q0[28] + -0.70710677F * q0[29], 0.70710677F * q0[30] + 0.70710677F * q0[31], 0.70710677F * q0[30] + -0.70710677F * q0[31], 0.70710677F * q0[32] + 0.70710677F * q0[33], 0.70710677F * q0[32] + -0.70710677F * q0[33], 0.70710677F * q0[34] + 0.70710677F * q0[35], 0.70710677F * q0[34] + -0.70710677F * q0[35], 0.70710677F * q0[36] + 0.70710677F * q0[37], 0.70710677F * q0[36] + -0.70710677F * q0[37], 0.70710677F * q0[38] + 0.70710677F * q0[39], 0.70710677F * q0[38] + -0.70710677F * q0[39], 0.70710677F * q0[40] + 0.70710677F * q0[41], 0.70710677F * q0[40] + -0.70710677F * q0[41], 0.70710677F * q0[42] + 0.70710677F * q0[43], 0.70710677F * q0[42] + -0.70710677F * q0[43], 0.70710677F * q0[44] + 0.70710677F * q0[45], 0.70710677F * q0[44] + -0.70710677F * q0[45], 0.70710677F * q0[46] + 0.70710677F * q0[47], 0.70710677F * q0[46] + -0.70710677F * q0[47], 0.70710677F * q0[48] + 0.70710677F * q0[49], 0.70710677F * q0[48] + -0.70710677F * q0[49], 0.70710677F * q0[50] + 0.70710677F * q0[51], 0.70710677F * q0[50] + -0.70710677F * q0[51], 0.70710677F * q0[52] + 0.70710677F * q0[53], 0.70710677F * q0[52] + -0.70710677F * q0[53], 0.70710677F * q0[54] + 0.70710677F * q0[55], 0.70710677F * q0[54] + -0.70710677F * q0[55], 0.70710677F * q0[56] + 0.70710677F * q0[57], 0.70710677F * q0[56] + -0.70710677F * q0[57], 0.70710677F * q0[58] + 0.70710677F * q0[59], 0.70710677F * q0[58] + -0.70710677F * q0[59], 0.70710677F * q0[60] + 0.70710677F * q0[61], 0.70710677F * q0[60] + -0.70710677F * q0[61], 0.70710677F * q0[62] + 0.70710677F * q0[63], 0.70710677F * q0[62] + -0.70710677F * q0[63]};
        boolean $$_tmp_measureVar1;
        if (CProver.nondetBoolean()) {
          if (true && q0[0] == 0.0F && q0[1] == 0.0F && q0[2] == 0.0F && q0[3] == 0.0F && q0[4] == 0.0F && q0[5] == 0.0F && q0[6] == 0.0F && q0[7] == 0.0F && q0[8] == 0.0F && q0[9] == 0.0F && q0[10] == 0.0F && q0[11] == 0.0F && q0[12] == 0.0F && q0[13] == 0.0F && q0[14] == 0.0F && q0[15] == 0.0F && q0[16] == 0.0F && q0[17] == 0.0F && q0[18] == 0.0F && q0[19] == 0.0F && q0[20] == 0.0F && q0[21] == 0.0F && q0[22] == 0.0F && q0[23] == 0.0F && q0[24] == 0.0F && q0[25] == 0.0F && q0[26] == 0.0F && q0[27] == 0.0F && q0[28] == 0.0F && q0[29] == 0.0F && q0[30] == 0.0F && q0[31] == 0.0F) CProver.assume(false);
          q0 = new float[]{q0[0], q0[1], q0[2], q0[3], q0[4], q0[5], q0[6], q0[7], q0[8], q0[9], q0[10], q0[11], q0[12], q0[13], q0[14], q0[15], q0[16], q0[17], q0[18], q0[19], q0[20], q0[21], q0[22], q0[23], q0[24], q0[25], q0[26], q0[27], q0[28], q0[29], q0[30], q0[31], 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F};
          $$_tmp_measureVar1 = false;
        } else {
          if (true && q0[32] == 0.0F && q0[33] == 0.0F && q0[34] == 0.0F && q0[35] == 0.0F && q0[36] == 0.0F && q0[37] == 0.0F && q0[38] == 0.0F && q0[39] == 0.0F && q0[40] == 0.0F && q0[41] == 0.0F && q0[42] == 0.0F && q0[43] == 0.0F && q0[44] == 0.0F && q0[45] == 0.0F && q0[46] == 0.0F && q0[47] == 0.0F && q0[48] == 0.0F && q0[49] == 0.0F && q0[50] == 0.0F && q0[51] == 0.0F && q0[52] == 0.0F && q0[53] == 0.0F && q0[54] == 0.0F && q0[55] == 0.0F && q0[56] == 0.0F && q0[57] == 0.0F && q0[58] == 0.0F && q0[59] == 0.0F && q0[60] == 0.0F && q0[61] == 0.0F && q0[62] == 0.0F && q0[63] == 0.0F) CProver.assume(false);
          q0 = new float[]{0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, q0[32], q0[33], q0[34], q0[35], q0[36], q0[37], q0[38], q0[39], q0[40], q0[41], q0[42], q0[43], q0[44], q0[45], q0[46], q0[47], q0[48], q0[49], q0[50], q0[51], q0[52], q0[53], q0[54], q0[55], q0[56], q0[57], q0[58], q0[59], q0[60], q0[61], q0[62], q0[63]};
          $$_tmp_measureVar1 = true;
        }
        res += ($$_tmp_measureVar1 ? (1 << 0) : 0);
      }
    }
    {
      {
        boolean $$_tmp_measureVar2;
        if (CProver.nondetBoolean()) {
          if (true && q0[0] == 0.0F && q0[1] == 0.0F && q0[2] == 0.0F && q0[3] == 0.0F && q0[4] == 0.0F && q0[5] == 0.0F && q0[6] == 0.0F && q0[7] == 0.0F && q0[8] == 0.0F && q0[9] == 0.0F && q0[10] == 0.0F && q0[11] == 0.0F && q0[12] == 0.0F && q0[13] == 0.0F && q0[14] == 0.0F && q0[15] == 0.0F && q0[32] == 0.0F && q0[33] == 0.0F && q0[34] == 0.0F && q0[35] == 0.0F && q0[36] == 0.0F && q0[37] == 0.0F && q0[38] == 0.0F && q0[39] == 0.0F && q0[40] == 0.0F && q0[41] == 0.0F && q0[42] == 0.0F && q0[43] == 0.0F && q0[44] == 0.0F && q0[45] == 0.0F && q0[46] == 0.0F && q0[47] == 0.0F) CProver.assume(false);
          q0 = new float[]{q0[0], q0[1], q0[2], q0[3], q0[4], q0[5], q0[6], q0[7], q0[8], q0[9], q0[10], q0[11], q0[12], q0[13], q0[14], q0[15], 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, q0[32], q0[33], q0[34], q0[35], q0[36], q0[37], q0[38], q0[39], q0[40], q0[41], q0[42], q0[43], q0[44], q0[45], q0[46], q0[47], 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F};
          $$_tmp_measureVar2 = false;
        } else {
          if (true && q0[16] == 0.0F && q0[17] == 0.0F && q0[18] == 0.0F && q0[19] == 0.0F && q0[20] == 0.0F && q0[21] == 0.0F && q0[22] == 0.0F && q0[23] == 0.0F && q0[24] == 0.0F && q0[25] == 0.0F && q0[26] == 0.0F && q0[27] == 0.0F && q0[28] == 0.0F && q0[29] == 0.0F && q0[30] == 0.0F && q0[31] == 0.0F && q0[48] == 0.0F && q0[49] == 0.0F && q0[50] == 0.0F && q0[51] == 0.0F && q0[52] == 0.0F && q0[53] == 0.0F && q0[54] == 0.0F && q0[55] == 0.0F && q0[56] == 0.0F && q0[57] == 0.0F && q0[58] == 0.0F && q0[59] == 0.0F && q0[60] == 0.0F && q0[61] == 0.0F && q0[62] == 0.0F && q0[63] == 0.0F) CProver.assume(false);
          q0 = new float[]{0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, q0[16], q0[17], q0[18], q0[19], q0[20], q0[21], q0[22], q0[23], q0[24], q0[25], q0[26], q0[27], q0[28], q0[29], q0[30], q0[31], 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, q0[48], q0[49], q0[50], q0[51], q0[52], q0[53], q0[54], q0[55], q0[56], q0[57], q0[58], q0[59], q0[60], q0[61], q0[62], q0[63]};
          $$_tmp_measureVar2 = true;
        }
        res += ($$_tmp_measureVar2 ? (1 << 1) : 0);
      }
    }
    {
      {
        boolean $$_tmp_measureVar3;
        if (CProver.nondetBoolean()) {
          if (true && q0[0] == 0.0F && q0[1] == 0.0F && q0[2] == 0.0F && q0[3] == 0.0F && q0[4] == 0.0F && q0[5] == 0.0F && q0[6] == 0.0F && q0[7] == 0.0F && q0[16] == 0.0F && q0[17] == 0.0F && q0[18] == 0.0F && q0[19] == 0.0F && q0[20] == 0.0F && q0[21] == 0.0F && q0[22] == 0.0F && q0[23] == 0.0F && q0[32] == 0.0F && q0[33] == 0.0F && q0[34] == 0.0F && q0[35] == 0.0F && q0[36] == 0.0F && q0[37] == 0.0F && q0[38] == 0.0F && q0[39] == 0.0F && q0[48] == 0.0F && q0[49] == 0.0F && q0[50] == 0.0F && q0[51] == 0.0F && q0[52] == 0.0F && q0[53] == 0.0F && q0[54] == 0.0F && q0[55] == 0.0F) CProver.assume(false);
          q0 = new float[]{q0[0], q0[1], q0[2], q0[3], q0[4], q0[5], q0[6], q0[7], 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, q0[16], q0[17], q0[18], q0[19], q0[20], q0[21], q0[22], q0[23], 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, q0[32], q0[33], q0[34], q0[35], q0[36], q0[37], q0[38], q0[39], 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, q0[48], q0[49], q0[50], q0[51], q0[52], q0[53], q0[54], q0[55], 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F};
          $$_tmp_measureVar3 = false;
        } else {
          if (true && q0[8] == 0.0F && q0[9] == 0.0F && q0[10] == 0.0F && q0[11] == 0.0F && q0[12] == 0.0F && q0[13] == 0.0F && q0[14] == 0.0F && q0[15] == 0.0F && q0[24] == 0.0F && q0[25] == 0.0F && q0[26] == 0.0F && q0[27] == 0.0F && q0[28] == 0.0F && q0[29] == 0.0F && q0[30] == 0.0F && q0[31] == 0.0F && q0[40] == 0.0F && q0[41] == 0.0F && q0[42] == 0.0F && q0[43] == 0.0F && q0[44] == 0.0F && q0[45] == 0.0F && q0[46] == 0.0F && q0[47] == 0.0F && q0[56] == 0.0F && q0[57] == 0.0F && q0[58] == 0.0F && q0[59] == 0.0F && q0[60] == 0.0F && q0[61] == 0.0F && q0[62] == 0.0F && q0[63] == 0.0F) CProver.assume(false);
          q0 = new float[]{0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, q0[8], q0[9], q0[10], q0[11], q0[12], q0[13], q0[14], q0[15], 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, q0[24], q0[25], q0[26], q0[27], q0[28], q0[29], q0[30], q0[31], 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, q0[40], q0[41], q0[42], q0[43], q0[44], q0[45], q0[46], q0[47], 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, q0[56], q0[57], q0[58], q0[59], q0[60], q0[61], q0[62], q0[63]};
          $$_tmp_measureVar3 = true;
        }
        res += ($$_tmp_measureVar3 ? (1 << 2) : 0);
      }
    }
    {
      {
        boolean $$_tmp_measureVar4;
        if (CProver.nondetBoolean()) {
          if (true && q0[0] == 0.0F && q0[1] == 0.0F && q0[2] == 0.0F && q0[3] == 0.0F && q0[8] == 0.0F && q0[9] == 0.0F && q0[10] == 0.0F && q0[11] == 0.0F && q0[16] == 0.0F && q0[17] == 0.0F && q0[18] == 0.0F && q0[19] == 0.0F && q0[24] == 0.0F && q0[25] == 0.0F && q0[26] == 0.0F && q0[27] == 0.0F && q0[32] == 0.0F && q0[33] == 0.0F && q0[34] == 0.0F && q0[35] == 0.0F && q0[40] == 0.0F && q0[41] == 0.0F && q0[42] == 0.0F && q0[43] == 0.0F && q0[48] == 0.0F && q0[49] == 0.0F && q0[50] == 0.0F && q0[51] == 0.0F && q0[56] == 0.0F && q0[57] == 0.0F && q0[58] == 0.0F && q0[59] == 0.0F) CProver.assume(false);
          q0 = new float[]{q0[0], q0[1], q0[2], q0[3], 0.0F, 0.0F, 0.0F, 0.0F, q0[8], q0[9], q0[10], q0[11], 0.0F, 0.0F, 0.0F, 0.0F, q0[16], q0[17], q0[18], q0[19], 0.0F, 0.0F, 0.0F, 0.0F, q0[24], q0[25], q0[26], q0[27], 0.0F, 0.0F, 0.0F, 0.0F, q0[32], q0[33], q0[34], q0[35], 0.0F, 0.0F, 0.0F, 0.0F, q0[40], q0[41], q0[42], q0[43], 0.0F, 0.0F, 0.0F, 0.0F, q0[48], q0[49], q0[50], q0[51], 0.0F, 0.0F, 0.0F, 0.0F, q0[56], q0[57], q0[58], q0[59], 0.0F, 0.0F, 0.0F, 0.0F};
          $$_tmp_measureVar4 = false;
        } else {
          if (true && q0[4] == 0.0F && q0[5] == 0.0F && q0[6] == 0.0F && q0[7] == 0.0F && q0[12] == 0.0F && q0[13] == 0.0F && q0[14] == 0.0F && q0[15] == 0.0F && q0[20] == 0.0F && q0[21] == 0.0F && q0[22] == 0.0F && q0[23] == 0.0F && q0[28] == 0.0F && q0[29] == 0.0F && q0[30] == 0.0F && q0[31] == 0.0F && q0[36] == 0.0F && q0[37] == 0.0F && q0[38] == 0.0F && q0[39] == 0.0F && q0[44] == 0.0F && q0[45] == 0.0F && q0[46] == 0.0F && q0[47] == 0.0F && q0[52] == 0.0F && q0[53] == 0.0F && q0[54] == 0.0F && q0[55] == 0.0F && q0[60] == 0.0F && q0[61] == 0.0F && q0[62] == 0.0F && q0[63] == 0.0F) CProver.assume(false);
          q0 = new float[]{0.0F, 0.0F, 0.0F, 0.0F, q0[4], q0[5], q0[6], q0[7], 0.0F, 0.0F, 0.0F, 0.0F, q0[12], q0[13], q0[14], q0[15], 0.0F, 0.0F, 0.0F, 0.0F, q0[20], q0[21], q0[22], q0[23], 0.0F, 0.0F, 0.0F, 0.0F, q0[28], q0[29], q0[30], q0[31], 0.0F, 0.0F, 0.0F, 0.0F, q0[36], q0[37], q0[38], q0[39], 0.0F, 0.0F, 0.0F, 0.0F, q0[44], q0[45], q0[46], q0[47], 0.0F, 0.0F, 0.0F, 0.0F, q0[52], q0[53], q0[54], q0[55], 0.0F, 0.0F, 0.0F, 0.0F, q0[60], q0[61], q0[62], q0[63]};
          $$_tmp_measureVar4 = true;
        }
        res += ($$_tmp_measureVar4 ? (1 << 3) : 0);
      }
    }
    {
      {
        boolean $$_tmp_measureVar5;
        if (CProver.nondetBoolean()) {
          if (true && q0[0] == 0.0F && q0[1] == 0.0F && q0[4] == 0.0F && q0[5] == 0.0F && q0[8] == 0.0F && q0[9] == 0.0F && q0[12] == 0.0F && q0[13] == 0.0F && q0[16] == 0.0F && q0[17] == 0.0F && q0[20] == 0.0F && q0[21] == 0.0F && q0[24] == 0.0F && q0[25] == 0.0F && q0[28] == 0.0F && q0[29] == 0.0F && q0[32] == 0.0F && q0[33] == 0.0F && q0[36] == 0.0F && q0[37] == 0.0F && q0[40] == 0.0F && q0[41] == 0.0F && q0[44] == 0.0F && q0[45] == 0.0F && q0[48] == 0.0F && q0[49] == 0.0F && q0[52] == 0.0F && q0[53] == 0.0F && q0[56] == 0.0F && q0[57] == 0.0F && q0[60] == 0.0F && q0[61] == 0.0F) CProver.assume(false);
          q0 = new float[]{q0[0], q0[1], 0.0F, 0.0F, q0[4], q0[5], 0.0F, 0.0F, q0[8], q0[9], 0.0F, 0.0F, q0[12], q0[13], 0.0F, 0.0F, q0[16], q0[17], 0.0F, 0.0F, q0[20], q0[21], 0.0F, 0.0F, q0[24], q0[25], 0.0F, 0.0F, q0[28], q0[29], 0.0F, 0.0F, q0[32], q0[33], 0.0F, 0.0F, q0[36], q0[37], 0.0F, 0.0F, q0[40], q0[41], 0.0F, 0.0F, q0[44], q0[45], 0.0F, 0.0F, q0[48], q0[49], 0.0F, 0.0F, q0[52], q0[53], 0.0F, 0.0F, q0[56], q0[57], 0.0F, 0.0F, q0[60], q0[61], 0.0F, 0.0F};
          $$_tmp_measureVar5 = false;
        } else {
          if (true && q0[2] == 0.0F && q0[3] == 0.0F && q0[6] == 0.0F && q0[7] == 0.0F && q0[10] == 0.0F && q0[11] == 0.0F && q0[14] == 0.0F && q0[15] == 0.0F && q0[18] == 0.0F && q0[19] == 0.0F && q0[22] == 0.0F && q0[23] == 0.0F && q0[26] == 0.0F && q0[27] == 0.0F && q0[30] == 0.0F && q0[31] == 0.0F && q0[34] == 0.0F && q0[35] == 0.0F && q0[38] == 0.0F && q0[39] == 0.0F && q0[42] == 0.0F && q0[43] == 0.0F && q0[46] == 0.0F && q0[47] == 0.0F && q0[50] == 0.0F && q0[51] == 0.0F && q0[54] == 0.0F && q0[55] == 0.0F && q0[58] == 0.0F && q0[59] == 0.0F && q0[62] == 0.0F && q0[63] == 0.0F) CProver.assume(false);
          q0 = new float[]{0.0F, 0.0F, q0[2], q0[3], 0.0F, 0.0F, q0[6], q0[7], 0.0F, 0.0F, q0[10], q0[11], 0.0F, 0.0F, q0[14], q0[15], 0.0F, 0.0F, q0[18], q0[19], 0.0F, 0.0F, q0[22], q0[23], 0.0F, 0.0F, q0[26], q0[27], 0.0F, 0.0F, q0[30], q0[31], 0.0F, 0.0F, q0[34], q0[35], 0.0F, 0.0F, q0[38], q0[39], 0.0F, 0.0F, q0[42], q0[43], 0.0F, 0.0F, q0[46], q0[47], 0.0F, 0.0F, q0[50], q0[51], 0.0F, 0.0F, q0[54], q0[55], 0.0F, 0.0F, q0[58], q0[59], 0.0F, 0.0F, q0[62], q0[63]};
          $$_tmp_measureVar5 = true;
        }
        res += ($$_tmp_measureVar5 ? (1 << 4) : 0);
      }
    }
    {
      {
        boolean $$_tmp_measureVar6;
        if (CProver.nondetBoolean()) {
          if (true && q0[0] == 0.0F && q0[2] == 0.0F && q0[4] == 0.0F && q0[6] == 0.0F && q0[8] == 0.0F && q0[10] == 0.0F && q0[12] == 0.0F && q0[14] == 0.0F && q0[16] == 0.0F && q0[18] == 0.0F && q0[20] == 0.0F && q0[22] == 0.0F && q0[24] == 0.0F && q0[26] == 0.0F && q0[28] == 0.0F && q0[30] == 0.0F && q0[32] == 0.0F && q0[34] == 0.0F && q0[36] == 0.0F && q0[38] == 0.0F && q0[40] == 0.0F && q0[42] == 0.0F && q0[44] == 0.0F && q0[46] == 0.0F && q0[48] == 0.0F && q0[50] == 0.0F && q0[52] == 0.0F && q0[54] == 0.0F && q0[56] == 0.0F && q0[58] == 0.0F && q0[60] == 0.0F && q0[62] == 0.0F) CProver.assume(false);
          q0 = new float[]{q0[0], 0.0F, q0[2], 0.0F, q0[4], 0.0F, q0[6], 0.0F, q0[8], 0.0F, q0[10], 0.0F, q0[12], 0.0F, q0[14], 0.0F, q0[16], 0.0F, q0[18], 0.0F, q0[20], 0.0F, q0[22], 0.0F, q0[24], 0.0F, q0[26], 0.0F, q0[28], 0.0F, q0[30], 0.0F, q0[32], 0.0F, q0[34], 0.0F, q0[36], 0.0F, q0[38], 0.0F, q0[40], 0.0F, q0[42], 0.0F, q0[44], 0.0F, q0[46], 0.0F, q0[48], 0.0F, q0[50], 0.0F, q0[52], 0.0F, q0[54], 0.0F, q0[56], 0.0F, q0[58], 0.0F, q0[60], 0.0F, q0[62], 0.0F};
          $$_tmp_measureVar6 = false;
        } else {
          if (true && q0[1] == 0.0F && q0[3] == 0.0F && q0[5] == 0.0F && q0[7] == 0.0F && q0[9] == 0.0F && q0[11] == 0.0F && q0[13] == 0.0F && q0[15] == 0.0F && q0[17] == 0.0F && q0[19] == 0.0F && q0[21] == 0.0F && q0[23] == 0.0F && q0[25] == 0.0F && q0[27] == 0.0F && q0[29] == 0.0F && q0[31] == 0.0F && q0[33] == 0.0F && q0[35] == 0.0F && q0[37] == 0.0F && q0[39] == 0.0F && q0[41] == 0.0F && q0[43] == 0.0F && q0[45] == 0.0F && q0[47] == 0.0F && q0[49] == 0.0F && q0[51] == 0.0F && q0[53] == 0.0F && q0[55] == 0.0F && q0[57] == 0.0F && q0[59] == 0.0F && q0[61] == 0.0F && q0[63] == 0.0F) CProver.assume(false);
          q0 = new float[]{0.0F, q0[1], 0.0F, q0[3], 0.0F, q0[5], 0.0F, q0[7], 0.0F, q0[9], 0.0F, q0[11], 0.0F, q0[13], 0.0F, q0[15], 0.0F, q0[17], 0.0F, q0[19], 0.0F, q0[21], 0.0F, q0[23], 0.0F, q0[25], 0.0F, q0[27], 0.0F, q0[29], 0.0F, q0[31], 0.0F, q0[33], 0.0F, q0[35], 0.0F, q0[37], 0.0F, q0[39], 0.0F, q0[41], 0.0F, q0[43], 0.0F, q0[45], 0.0F, q0[47], 0.0F, q0[49], 0.0F, q0[51], 0.0F, q0[53], 0.0F, q0[55], 0.0F, q0[57], 0.0F, q0[59], 0.0F, q0[61], 0.0F, q0[63]};
          $$_tmp_measureVar6 = true;
        }
        res += ($$_tmp_measureVar6 ? (1 << 5) : 0);
      }
    }
    return res;
  }
}
