

public class QBenchmark2S {

  public QBenchmark2S() {
    super();
  }
  private static final int N = 1;
    /*@
      requires qstate != null && qstatei != null && qstate.length == 8 && qstatei.length == 8;
      requires (\exists int i; i >= 0 && i < qstate.length; qstate[i] == 1.0F && (\forall int j; j >= 0 && j < qstate.length; (i != j) ==> qstate[j] == 0.0F));
      requires (\forall int i; i >= 0 && i < qstate.length; qstatei[i] == 0.0F);
   */

  public static void gatesTest3(/*@ non_null */
          float[] qstate, /*@ non_null */
          float[] qstatei) {
    int idx = 0;
    for (int i = 0; i < qstate.length; ++i) {
      if (qstate[i] != 0.0F) {
        idx = i;
      }
    }
    float[] q0 = new float[]{qstate[0], qstate[1], qstate[2], qstate[3], qstate[4], qstate[5], qstate[6], qstate[7]};
    float[] q1 = new float[]{qstatei[0], qstatei[1], qstatei[2], qstatei[3], qstatei[4], qstatei[5], qstatei[6], qstatei[7]};
    {
      {
        q0 = new float[]{0.35355338F * q0[0] + 0.35355338F * q0[1] + 0.35355338F * q0[2] + 0.35355338F * q0[3] + 0.35355338F * q0[4] + 0.35355338F * q0[5] + 0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + 0.35355338F * q0[2] + -0.35355338F * q0[3] + 0.35355338F * q0[4] + -0.35355338F * q0[5] + 0.35355338F * q0[6] + -0.35355338F * q0[7], 0.35355338F * q0[0] + 0.35355338F * q0[1] + -0.35355338F * q0[2] + -0.35355338F * q0[3] + 0.35355338F * q0[4] + 0.35355338F * q0[5] + -0.35355338F * q0[6] + -0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + -0.35355338F * q0[2] + 0.35355338F * q0[3] + 0.35355338F * q0[4] + -0.35355338F * q0[5] + -0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + 0.35355338F * q0[1] + 0.35355338F * q0[2] + 0.35355338F * q0[3] + -0.35355338F * q0[4] + -0.35355338F * q0[5] + -0.35355338F * q0[6] + -0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + 0.35355338F * q0[2] + -0.35355338F * q0[3] + -0.35355338F * q0[4] + 0.35355338F * q0[5] + -0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + 0.35355338F * q0[1] + -0.35355338F * q0[2] + -0.35355338F * q0[3] + -0.35355338F * q0[4] + -0.35355338F * q0[5] + 0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + -0.35355338F * q0[2] + 0.35355338F * q0[3] + -0.35355338F * q0[4] + 0.35355338F * q0[5] + 0.35355338F * q0[6] + -0.35355338F * q0[7]};
        q1 = new float[]{0.35355338F * q1[0] + 0.35355338F * q1[1] + 0.35355338F * q1[2] + 0.35355338F * q1[3] + 0.35355338F * q1[4] + 0.35355338F * q1[5] + 0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + 0.35355338F * q1[2] + -0.35355338F * q1[3] + 0.35355338F * q1[4] + -0.35355338F * q1[5] + 0.35355338F * q1[6] + -0.35355338F * q1[7], 0.35355338F * q1[0] + 0.35355338F * q1[1] + -0.35355338F * q1[2] + -0.35355338F * q1[3] + 0.35355338F * q1[4] + 0.35355338F * q1[5] + -0.35355338F * q1[6] + -0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + -0.35355338F * q1[2] + 0.35355338F * q1[3] + 0.35355338F * q1[4] + -0.35355338F * q1[5] + -0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + 0.35355338F * q1[1] + 0.35355338F * q1[2] + 0.35355338F * q1[3] + -0.35355338F * q1[4] + -0.35355338F * q1[5] + -0.35355338F * q1[6] + -0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + 0.35355338F * q1[2] + -0.35355338F * q1[3] + -0.35355338F * q1[4] + 0.35355338F * q1[5] + -0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + 0.35355338F * q1[1] + -0.35355338F * q1[2] + -0.35355338F * q1[3] + -0.35355338F * q1[4] + -0.35355338F * q1[5] + 0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + -0.35355338F * q1[2] + 0.35355338F * q1[3] + -0.35355338F * q1[4] + 0.35355338F * q1[5] + 0.35355338F * q1[6] + -0.35355338F * q1[7]};
      }
    }
    {
      {
        q0 = new float[]{0.35355338F * q0[0] + 0.35355338F * q0[1] + 0.35355338F * q0[2] + 0.35355338F * q0[3] + 0.35355338F * q0[4] + 0.35355338F * q0[5] + 0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + 0.35355338F * q0[2] + -0.35355338F * q0[3] + 0.35355338F * q0[4] + -0.35355338F * q0[5] + 0.35355338F * q0[6] + -0.35355338F * q0[7], 0.35355338F * q0[0] + 0.35355338F * q0[1] + -0.35355338F * q0[2] + -0.35355338F * q0[3] + 0.35355338F * q0[4] + 0.35355338F * q0[5] + -0.35355338F * q0[6] + -0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + -0.35355338F * q0[2] + 0.35355338F * q0[3] + 0.35355338F * q0[4] + -0.35355338F * q0[5] + -0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + 0.35355338F * q0[1] + 0.35355338F * q0[2] + 0.35355338F * q0[3] + -0.35355338F * q0[4] + -0.35355338F * q0[5] + -0.35355338F * q0[6] + -0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + 0.35355338F * q0[2] + -0.35355338F * q0[3] + -0.35355338F * q0[4] + 0.35355338F * q0[5] + -0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + 0.35355338F * q0[1] + -0.35355338F * q0[2] + -0.35355338F * q0[3] + -0.35355338F * q0[4] + -0.35355338F * q0[5] + 0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + -0.35355338F * q0[2] + 0.35355338F * q0[3] + -0.35355338F * q0[4] + 0.35355338F * q0[5] + 0.35355338F * q0[6] + -0.35355338F * q0[7]};
        q1 = new float[]{0.35355338F * q1[0] + 0.35355338F * q1[1] + 0.35355338F * q1[2] + 0.35355338F * q1[3] + 0.35355338F * q1[4] + 0.35355338F * q1[5] + 0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + 0.35355338F * q1[2] + -0.35355338F * q1[3] + 0.35355338F * q1[4] + -0.35355338F * q1[5] + 0.35355338F * q1[6] + -0.35355338F * q1[7], 0.35355338F * q1[0] + 0.35355338F * q1[1] + -0.35355338F * q1[2] + -0.35355338F * q1[3] + 0.35355338F * q1[4] + 0.35355338F * q1[5] + -0.35355338F * q1[6] + -0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + -0.35355338F * q1[2] + 0.35355338F * q1[3] + 0.35355338F * q1[4] + -0.35355338F * q1[5] + -0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + 0.35355338F * q1[1] + 0.35355338F * q1[2] + 0.35355338F * q1[3] + -0.35355338F * q1[4] + -0.35355338F * q1[5] + -0.35355338F * q1[6] + -0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + 0.35355338F * q1[2] + -0.35355338F * q1[3] + -0.35355338F * q1[4] + 0.35355338F * q1[5] + -0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + 0.35355338F * q1[1] + -0.35355338F * q1[2] + -0.35355338F * q1[3] + -0.35355338F * q1[4] + -0.35355338F * q1[5] + 0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + -0.35355338F * q1[2] + 0.35355338F * q1[3] + -0.35355338F * q1[4] + 0.35355338F * q1[5] + 0.35355338F * q1[6] + -0.35355338F * q1[7]};
      }
    }
    {
      {
        q0 = new float[]{0.35355338F * q0[0] + 0.35355338F * q0[1] + 0.35355338F * q0[2] + 0.35355338F * q0[3] + 0.35355338F * q0[4] + 0.35355338F * q0[5] + 0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + 0.35355338F * q0[2] + -0.35355338F * q0[3] + 0.35355338F * q0[4] + -0.35355338F * q0[5] + 0.35355338F * q0[6] + -0.35355338F * q0[7], 0.35355338F * q0[0] + 0.35355338F * q0[1] + -0.35355338F * q0[2] + -0.35355338F * q0[3] + 0.35355338F * q0[4] + 0.35355338F * q0[5] + -0.35355338F * q0[6] + -0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + -0.35355338F * q0[2] + 0.35355338F * q0[3] + 0.35355338F * q0[4] + -0.35355338F * q0[5] + -0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + 0.35355338F * q0[1] + 0.35355338F * q0[2] + 0.35355338F * q0[3] + -0.35355338F * q0[4] + -0.35355338F * q0[5] + -0.35355338F * q0[6] + -0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + 0.35355338F * q0[2] + -0.35355338F * q0[3] + -0.35355338F * q0[4] + 0.35355338F * q0[5] + -0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + 0.35355338F * q0[1] + -0.35355338F * q0[2] + -0.35355338F * q0[3] + -0.35355338F * q0[4] + -0.35355338F * q0[5] + 0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + -0.35355338F * q0[2] + 0.35355338F * q0[3] + -0.35355338F * q0[4] + 0.35355338F * q0[5] + 0.35355338F * q0[6] + -0.35355338F * q0[7]};
        q1 = new float[]{0.35355338F * q1[0] + 0.35355338F * q1[1] + 0.35355338F * q1[2] + 0.35355338F * q1[3] + 0.35355338F * q1[4] + 0.35355338F * q1[5] + 0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + 0.35355338F * q1[2] + -0.35355338F * q1[3] + 0.35355338F * q1[4] + -0.35355338F * q1[5] + 0.35355338F * q1[6] + -0.35355338F * q1[7], 0.35355338F * q1[0] + 0.35355338F * q1[1] + -0.35355338F * q1[2] + -0.35355338F * q1[3] + 0.35355338F * q1[4] + 0.35355338F * q1[5] + -0.35355338F * q1[6] + -0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + -0.35355338F * q1[2] + 0.35355338F * q1[3] + 0.35355338F * q1[4] + -0.35355338F * q1[5] + -0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + 0.35355338F * q1[1] + 0.35355338F * q1[2] + 0.35355338F * q1[3] + -0.35355338F * q1[4] + -0.35355338F * q1[5] + -0.35355338F * q1[6] + -0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + 0.35355338F * q1[2] + -0.35355338F * q1[3] + -0.35355338F * q1[4] + 0.35355338F * q1[5] + -0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + 0.35355338F * q1[1] + -0.35355338F * q1[2] + -0.35355338F * q1[3] + -0.35355338F * q1[4] + -0.35355338F * q1[5] + 0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + -0.35355338F * q1[2] + 0.35355338F * q1[3] + -0.35355338F * q1[4] + 0.35355338F * q1[5] + 0.35355338F * q1[6] + -0.35355338F * q1[7]};
      }
    }
    {
      {
        q0 = new float[]{0.35355338F * q0[0] + 0.35355338F * q0[1] + 0.35355338F * q0[2] + 0.35355338F * q0[3] + 0.35355338F * q0[4] + 0.35355338F * q0[5] + 0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + 0.35355338F * q0[2] + -0.35355338F * q0[3] + 0.35355338F * q0[4] + -0.35355338F * q0[5] + 0.35355338F * q0[6] + -0.35355338F * q0[7], 0.35355338F * q0[0] + 0.35355338F * q0[1] + -0.35355338F * q0[2] + -0.35355338F * q0[3] + 0.35355338F * q0[4] + 0.35355338F * q0[5] + -0.35355338F * q0[6] + -0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + -0.35355338F * q0[2] + 0.35355338F * q0[3] + 0.35355338F * q0[4] + -0.35355338F * q0[5] + -0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + 0.35355338F * q0[1] + 0.35355338F * q0[2] + 0.35355338F * q0[3] + -0.35355338F * q0[4] + -0.35355338F * q0[5] + -0.35355338F * q0[6] + -0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + 0.35355338F * q0[2] + -0.35355338F * q0[3] + -0.35355338F * q0[4] + 0.35355338F * q0[5] + -0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + 0.35355338F * q0[1] + -0.35355338F * q0[2] + -0.35355338F * q0[3] + -0.35355338F * q0[4] + -0.35355338F * q0[5] + 0.35355338F * q0[6] + 0.35355338F * q0[7], 0.35355338F * q0[0] + -0.35355338F * q0[1] + -0.35355338F * q0[2] + 0.35355338F * q0[3] + -0.35355338F * q0[4] + 0.35355338F * q0[5] + 0.35355338F * q0[6] + -0.35355338F * q0[7]};
        q1 = new float[]{0.35355338F * q1[0] + 0.35355338F * q1[1] + 0.35355338F * q1[2] + 0.35355338F * q1[3] + 0.35355338F * q1[4] + 0.35355338F * q1[5] + 0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + 0.35355338F * q1[2] + -0.35355338F * q1[3] + 0.35355338F * q1[4] + -0.35355338F * q1[5] + 0.35355338F * q1[6] + -0.35355338F * q1[7], 0.35355338F * q1[0] + 0.35355338F * q1[1] + -0.35355338F * q1[2] + -0.35355338F * q1[3] + 0.35355338F * q1[4] + 0.35355338F * q1[5] + -0.35355338F * q1[6] + -0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + -0.35355338F * q1[2] + 0.35355338F * q1[3] + 0.35355338F * q1[4] + -0.35355338F * q1[5] + -0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + 0.35355338F * q1[1] + 0.35355338F * q1[2] + 0.35355338F * q1[3] + -0.35355338F * q1[4] + -0.35355338F * q1[5] + -0.35355338F * q1[6] + -0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + 0.35355338F * q1[2] + -0.35355338F * q1[3] + -0.35355338F * q1[4] + 0.35355338F * q1[5] + -0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + 0.35355338F * q1[1] + -0.35355338F * q1[2] + -0.35355338F * q1[3] + -0.35355338F * q1[4] + -0.35355338F * q1[5] + 0.35355338F * q1[6] + 0.35355338F * q1[7], 0.35355338F * q1[0] + -0.35355338F * q1[1] + -0.35355338F * q1[2] + 0.35355338F * q1[3] + -0.35355338F * q1[4] + 0.35355338F * q1[5] + 0.35355338F * q1[6] + -0.35355338F * q1[7]};
      }
    }
    {
      {
        boolean $$_tmp_measureVar1;
        if (q0[4] * q0[4] + q1[4] * q1[4] + q0[5] * q0[5] + q1[5] * q1[5] + q0[6] * q0[6] + q1[6] * q1[6] + q0[7] * q0[7] + q1[7] * q1[7] > q0[0] * q0[0] + q1[0] * q1[0] + q0[1] * q0[1] + q1[1] * q1[1] + q0[2] * q0[2] + q1[2] * q1[2] + q0[3] * q0[3] + q1[3] * q1[3]) {
          q0 = new float[]{0.0F, 0.0F, 0.0F, 0.0F, q0[4], q0[5], q0[6], q0[7]};
          q1 = new float[]{0.0F, 0.0F, 0.0F, 0.0F, q1[4], q1[5], q1[6], q1[7]};
          $$_tmp_measureVar1 = true;
        } else {
          q0 = new float[]{q0[0], q0[1], q0[2], q0[3], 0.0F, 0.0F, 0.0F, 0.0F};
          q1 = new float[]{q1[0], q1[1], q1[2], q1[3], 0.0F, 0.0F, 0.0F, 0.0F};
          $$_tmp_measureVar1 = false;
        }
        assert $$_tmp_measureVar1 == ((idx & (1 << 2)) != 0);
      }
    }
    {
      {
        boolean $$_tmp_measureVar2;
        if (q0[2] * q0[2] + q1[2] * q1[2] + q0[3] * q0[3] + q1[3] * q1[3] + q0[6] * q0[6] + q1[6] * q1[6] + q0[7] * q0[7] + q1[7] * q1[7] > q0[0] * q0[0] + q1[0] * q1[0] + q0[1] * q0[1] + q1[1] * q1[1] + q0[4] * q0[4] + q1[4] * q1[4] + q0[5] * q0[5] + q1[5] * q1[5]) {
          q0 = new float[]{0.0F, 0.0F, q0[2], q0[3], 0.0F, 0.0F, q0[6], q0[7]};
          q1 = new float[]{0.0F, 0.0F, q1[2], q1[3], 0.0F, 0.0F, q1[6], q1[7]};
          $$_tmp_measureVar2 = true;
        } else {
          q0 = new float[]{q0[0], q0[1], 0.0F, 0.0F, q0[4], q0[5], 0.0F, 0.0F};
          q1 = new float[]{q1[0], q1[1], 0.0F, 0.0F, q1[4], q1[5], 0.0F, 0.0F};
          $$_tmp_measureVar2 = false;
        }
        assert $$_tmp_measureVar2 == ((idx & (1 << 1)) != 0);
      }
    }
    {
      {
        boolean $$_tmp_measureVar3;
        if (q0[1] * q0[1] + q1[1] * q1[1] + q0[3] * q0[3] + q1[3] * q1[3] + q0[5] * q0[5] + q1[5] * q1[5] + q0[7] * q0[7] + q1[7] * q1[7] > q0[0] * q0[0] + q1[0] * q1[0] + q0[2] * q0[2] + q1[2] * q1[2] + q0[4] * q0[4] + q1[4] * q1[4] + q0[6] * q0[6] + q1[6] * q1[6]) {
          q0 = new float[]{0.0F, q0[1], 0.0F, q0[3], 0.0F, q0[5], 0.0F, q0[7]};
          q1 = new float[]{0.0F, q1[1], 0.0F, q1[3], 0.0F, q1[5], 0.0F, q1[7]};
          $$_tmp_measureVar3 = true;
        } else {
          q0 = new float[]{q0[0], 0.0F, q0[2], 0.0F, q0[4], 0.0F, q0[6], 0.0F};
          q1 = new float[]{q1[0], 0.0F, q1[2], 0.0F, q1[4], 0.0F, q1[6], 0.0F};
          $$_tmp_measureVar3 = false;
        }
        assert $$_tmp_measureVar3 == ((idx & (1 << 0)) != 0);
      }
    }
  }
    /*@
      requires qstate != null && qstatei != null && qstate.length == 4 && qstatei.length == 4;
      requires (\exists int i; i >= 0 && i < qstate.length; qstate[i] == 1.0F && (\forall int j; j >= 0 && j < qstate.length; (i != j) ==> qstate[j] == 0.0F));
      requires (\forall int i; i >= 0 && i < qstate.length; qstatei[i] == 0.0F);
   */

  public static void gatesTest2single(/*@ non_null */
          float[] qstate, /*@ non_null */
          float[] qstatei) {
    int idx = 0;
    for (int i = 0; i < qstate.length; ++i) {
      if (qstate[i] != 0.0F) {
        idx = i;
      }
    }
    float[] q0 = new float[]{qstate[0], qstate[1], qstate[2], qstate[3]};
    float[] q1 = new float[]{qstatei[0], qstatei[1], qstatei[2], qstatei[3]};
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[2], 0.70710677F * q0[1] + 0.70710677F * q0[3], 0.70710677F * q0[0] + -0.70710677F * q0[2], 0.70710677F * q0[1] + -0.70710677F * q0[3]};
        q1 = new float[]{0.70710677F * q1[0] + 0.70710677F * q1[2], 0.70710677F * q1[1] + 0.70710677F * q1[3], 0.70710677F * q1[0] + -0.70710677F * q1[2], 0.70710677F * q1[1] + -0.70710677F * q1[3]};
      }
    }
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[2], 0.70710677F * q0[1] + 0.70710677F * q0[3], 0.70710677F * q0[0] + -0.70710677F * q0[2], 0.70710677F * q0[1] + -0.70710677F * q0[3]};
        q1 = new float[]{0.70710677F * q1[0] + 0.70710677F * q1[2], 0.70710677F * q1[1] + 0.70710677F * q1[3], 0.70710677F * q1[0] + -0.70710677F * q1[2], 0.70710677F * q1[1] + -0.70710677F * q1[3]};
      }
    }
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[2], 0.70710677F * q0[1] + 0.70710677F * q0[3], 0.70710677F * q0[0] + -0.70710677F * q0[2], 0.70710677F * q0[1] + -0.70710677F * q0[3]};
        q1 = new float[]{0.70710677F * q1[0] + 0.70710677F * q1[2], 0.70710677F * q1[1] + 0.70710677F * q1[3], 0.70710677F * q1[0] + -0.70710677F * q1[2], 0.70710677F * q1[1] + -0.70710677F * q1[3]};
      }
    }
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[2], 0.70710677F * q0[1] + 0.70710677F * q0[3], 0.70710677F * q0[0] + -0.70710677F * q0[2], 0.70710677F * q0[1] + -0.70710677F * q0[3]};
        q1 = new float[]{0.70710677F * q1[0] + 0.70710677F * q1[2], 0.70710677F * q1[1] + 0.70710677F * q1[3], 0.70710677F * q1[0] + -0.70710677F * q1[2], 0.70710677F * q1[1] + -0.70710677F * q1[3]};
      }
    }
    {
      {
        boolean $$_tmp_measureVar4;
        if (q0[2] * q0[2] + q1[2] * q1[2] + q0[3] * q0[3] + q1[3] * q1[3] > q0[0] * q0[0] + q1[0] * q1[0] + q0[1] * q0[1] + q1[1] * q1[1]) {
          q0 = new float[]{0.0F, 0.0F, q0[2], q0[3]};
          q1 = new float[]{0.0F, 0.0F, q1[2], q1[3]};
          $$_tmp_measureVar4 = true;
        } else {
          q0 = new float[]{q0[0], q0[1], 0.0F, 0.0F};
          q1 = new float[]{q1[0], q1[1], 0.0F, 0.0F};
          $$_tmp_measureVar4 = false;
        }
        assert $$_tmp_measureVar4 == ((idx & (1 << 1)) != 0);
      }
    }
    {
      {
        boolean $$_tmp_measureVar5;
        if (q0[1] * q0[1] + q1[1] * q1[1] + q0[3] * q0[3] + q1[3] * q1[3] > q0[0] * q0[0] + q1[0] * q1[0] + q0[2] * q0[2] + q1[2] * q1[2]) {
          q0 = new float[]{0.0F, q0[1], 0.0F, q0[3]};
          q1 = new float[]{0.0F, q1[1], 0.0F, q1[3]};
          $$_tmp_measureVar5 = true;
        } else {
          q0 = new float[]{q0[0], 0.0F, q0[2], 0.0F};
          q1 = new float[]{q1[0], 0.0F, q1[2], 0.0F};
          $$_tmp_measureVar5 = false;
        }
        assert $$_tmp_measureVar5 == ((idx & (1 << 0)) != 0);
      }
    }
  }
    /*@
      requires qstate != null && qstatei != null && qstate.length == 4 && qstatei.length == 4;
      requires (\exists int i; i >= 0 && i < qstate.length; qstate[i] == 1.0F && (\forall int j; j >= 0 && j < qstate.length; (i != j) ==> qstate[j] == 0.0F));
      requires (\forall int i; i >= 0 && i < qstate.length; qstatei[i] == 0.0F);
   */

  public static void gatesTest2(/*@ non_null */
          float[] qstate, /*@ non_null */
          float[] qstatei) {
    int idx = 0;
    for (int i = 0; i < qstate.length; ++i) {
      if (qstate[i] != 0.0F) {
        idx = i;
      }
    }
    float[] q0 = new float[]{qstate[0], qstate[1], qstate[2], qstate[3]};
    float[] q1 = new float[]{qstatei[0], qstatei[1], qstatei[2], qstatei[3]};
    {
      {
        q0 = new float[]{0.5F * q0[0] + 0.5F * q0[1] + 0.5F * q0[2] + 0.5F * q0[3], 0.5F * q0[0] + -0.5F * q0[1] + 0.5F * q0[2] + -0.5F * q0[3], 0.5F * q0[0] + 0.5F * q0[1] + -0.5F * q0[2] + -0.5F * q0[3], 0.5F * q0[0] + -0.5F * q0[1] + -0.5F * q0[2] + 0.5F * q0[3]};
        q1 = new float[]{0.5F * q1[0] + 0.5F * q1[1] + 0.5F * q1[2] + 0.5F * q1[3], 0.5F * q1[0] + -0.5F * q1[1] + 0.5F * q1[2] + -0.5F * q1[3], 0.5F * q1[0] + 0.5F * q1[1] + -0.5F * q1[2] + -0.5F * q1[3], 0.5F * q1[0] + -0.5F * q1[1] + -0.5F * q1[2] + 0.5F * q1[3]};
      }
    }
    {
      {
        q0 = new float[]{0.5F * q0[0] + 0.5F * q0[1] + 0.5F * q0[2] + 0.5F * q0[3], 0.5F * q0[0] + -0.5F * q0[1] + 0.5F * q0[2] + -0.5F * q0[3], 0.5F * q0[0] + 0.5F * q0[1] + -0.5F * q0[2] + -0.5F * q0[3], 0.5F * q0[0] + -0.5F * q0[1] + -0.5F * q0[2] + 0.5F * q0[3]};
        q1 = new float[]{0.5F * q1[0] + 0.5F * q1[1] + 0.5F * q1[2] + 0.5F * q1[3], 0.5F * q1[0] + -0.5F * q1[1] + 0.5F * q1[2] + -0.5F * q1[3], 0.5F * q1[0] + 0.5F * q1[1] + -0.5F * q1[2] + -0.5F * q1[3], 0.5F * q1[0] + -0.5F * q1[1] + -0.5F * q1[2] + 0.5F * q1[3]};
      }
    }
    {
      {
        q0 = new float[]{0.5F * q0[0] + 0.5F * q0[1] + 0.5F * q0[2] + 0.5F * q0[3], 0.5F * q0[0] + -0.5F * q0[1] + 0.5F * q0[2] + -0.5F * q0[3], 0.5F * q0[0] + 0.5F * q0[1] + -0.5F * q0[2] + -0.5F * q0[3], 0.5F * q0[0] + -0.5F * q0[1] + -0.5F * q0[2] + 0.5F * q0[3]};
        q1 = new float[]{0.5F * q1[0] + 0.5F * q1[1] + 0.5F * q1[2] + 0.5F * q1[3], 0.5F * q1[0] + -0.5F * q1[1] + 0.5F * q1[2] + -0.5F * q1[3], 0.5F * q1[0] + 0.5F * q1[1] + -0.5F * q1[2] + -0.5F * q1[3], 0.5F * q1[0] + -0.5F * q1[1] + -0.5F * q1[2] + 0.5F * q1[3]};
      }
    }
    {
      {
        q0 = new float[]{0.5F * q0[0] + 0.5F * q0[1] + 0.5F * q0[2] + 0.5F * q0[3], 0.5F * q0[0] + -0.5F * q0[1] + 0.5F * q0[2] + -0.5F * q0[3], 0.5F * q0[0] + 0.5F * q0[1] + -0.5F * q0[2] + -0.5F * q0[3], 0.5F * q0[0] + -0.5F * q0[1] + -0.5F * q0[2] + 0.5F * q0[3]};
        q1 = new float[]{0.5F * q1[0] + 0.5F * q1[1] + 0.5F * q1[2] + 0.5F * q1[3], 0.5F * q1[0] + -0.5F * q1[1] + 0.5F * q1[2] + -0.5F * q1[3], 0.5F * q1[0] + 0.5F * q1[1] + -0.5F * q1[2] + -0.5F * q1[3], 0.5F * q1[0] + -0.5F * q1[1] + -0.5F * q1[2] + 0.5F * q1[3]};
      }
    }
    {
      {
        boolean $$_tmp_measureVar6;
        if (q0[2] * q0[2] + q1[2] * q1[2] + q0[3] * q0[3] + q1[3] * q1[3] > q0[0] * q0[0] + q1[0] * q1[0] + q0[1] * q0[1] + q1[1] * q1[1]) {
          q0 = new float[]{0.0F, 0.0F, q0[2], q0[3]};
          q1 = new float[]{0.0F, 0.0F, q1[2], q1[3]};
          $$_tmp_measureVar6 = true;
        } else {
          q0 = new float[]{q0[0], q0[1], 0.0F, 0.0F};
          q1 = new float[]{q1[0], q1[1], 0.0F, 0.0F};
          $$_tmp_measureVar6 = false;
        }
        assert $$_tmp_measureVar6 == ((idx & (1 << 1)) != 0);
      }
    }
    {
      {
        boolean $$_tmp_measureVar7;
        if (q0[1] * q0[1] + q1[1] * q1[1] + q0[3] * q0[3] + q1[3] * q1[3] > q0[0] * q0[0] + q1[0] * q1[0] + q0[2] * q0[2] + q1[2] * q1[2]) {
          q0 = new float[]{0.0F, q0[1], 0.0F, q0[3]};
          q1 = new float[]{0.0F, q1[1], 0.0F, q1[3]};
          $$_tmp_measureVar7 = true;
        } else {
          q0 = new float[]{q0[0], 0.0F, q0[2], 0.0F};
          q1 = new float[]{q1[0], 0.0F, q1[2], 0.0F};
          $$_tmp_measureVar7 = false;
        }
        assert $$_tmp_measureVar7 == ((idx & (1 << 0)) != 0);
      }
    }
  }
    /*@
      requires qstate != null && qstatei != null && qstate.length == 2 && qstatei.length == 2;
      requires (\exists int i; i >= 0 && i < qstate.length; qstate[i] == 1.0F && (\forall int j; j >= 0 && j < qstate.length; (i != j) ==> qstate[j] == 0.0F));
      requires (\forall int i; i >= 0 && i < qstate.length; qstatei[i] == 0.0F);
   */

  public static void gatesTest1(/*@ non_null */
          float[] qstate, /*@ non_null */
          float[] qstatei) {
    int idx = 0;
    for (int i = 0; i < qstate.length; ++i) {
      if (qstate[i] != 0.0F) {
        idx = i;
      }
    }
    float[] q0 = new float[]{qstate[0], qstate[1]};
    float[] q1 = new float[]{qstatei[0], qstatei[1]};
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[1], 0.70710677F * q0[0] + -0.70710677F * q0[1]};
        q1 = new float[]{0.70710677F * q1[0] + 0.70710677F * q1[1], 0.70710677F * q1[0] + -0.70710677F * q1[1]};
      }
    }
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[1], 0.70710677F * q0[0] + -0.70710677F * q0[1]};
        q1 = new float[]{0.70710677F * q1[0] + 0.70710677F * q1[1], 0.70710677F * q1[0] + -0.70710677F * q1[1]};
      }
    }
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[1], 0.70710677F * q0[0] + -0.70710677F * q0[1]};
        q1 = new float[]{0.70710677F * q1[0] + 0.70710677F * q1[1], 0.70710677F * q1[0] + -0.70710677F * q1[1]};
      }
    }
    {
      {
        q0 = new float[]{0.70710677F * q0[0] + 0.70710677F * q0[1], 0.70710677F * q0[0] + -0.70710677F * q0[1]};
        q1 = new float[]{0.70710677F * q1[0] + 0.70710677F * q1[1], 0.70710677F * q1[0] + -0.70710677F * q1[1]};
      }
    }
    {
      {
        boolean $$_tmp_measureVar8;
        if (q0[1] * q0[1] + q1[1] * q1[1] > q0[0] * q0[0] + q1[0] * q1[0]) {
          q0 = new float[]{0.0F, q0[1]};
          q1 = new float[]{0.0F, q1[1]};
          $$_tmp_measureVar8 = true;
        } else {
          q0 = new float[]{q0[0], 0.0F};
          q1 = new float[]{q1[0], 0.0F};
          $$_tmp_measureVar8 = false;
        }
        assert $$_tmp_measureVar8 == ((idx & (1 << 0)) != 0);
      }
    }
  }
}
